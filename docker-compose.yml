version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: blogpassword
      POSTGRES_DB: blogdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "6543:5432"
    networks:
      - app_network

  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://bloguser:blogpassword@postgres:5432/blogdb
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
    ports:
      - "3001:3001"
    networks:
      - app_network

  blog:
    build:
      context: .
      dockerfile: apps/blog/Dockerfile
    depends_on:
      - server
    environment:
      NEXT_PUBLIC_API_URL: http://server:3001
    ports:
      - "3000:3000"
    networks:
      - app_network

  lowcode:
    build:
      context: .
      dockerfile: apps/lowcode/Dockerfile
    depends_on:
      - server
    environment:
      VITE_API_URL: http://server:3001
    ports:
      - "3002:3002"
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - blog
      - lowcode
      - server
    networks:
      - app_network

  # Prometheus监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app_network
    restart: unless-stopped

  # Grafana可视化服务
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3003:3000"
    networks:
      - app_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter - 系统指标收集
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - app_network
    restart: unless-stopped

  # Postgres Exporter - 数据库指标收集
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://app_user:blogpassword@postgres:5432/blogdb?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - app_network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
