/**
 * 代码生成面板组件
 */

import { useCodeGeneration } from '@/hooks/useCodeGeneration';
import { useEditorStore } from '@/store/editorStore';
import { Code, Download, Preview } from '@mui/icons-material';
import {
    Box,
    Button,
    Chip,
    CircularProgress,
    Paper,
    Stack,
    TextField,
    Typography
} from '@mui/material';
import React, { useState } from 'react';
import { CodeGenerationConfig, TargetPlatform } from '../../codegen/types';

const PLATFORMS: { value: TargetPlatform; label: string; color: string }[] = [
    { value: 'weapp', label: '微信小程序', color: '#07c160' },
    { value: 'alipay', label: '支付宝小程序', color: '#1677ff' },
    { value: 'h5', label: 'H5应用', color: '#ff6b35' },
    { value: 'rn', label: 'React Native', color: '#61dafb' },
    { value: 'tt', label: '字节跳动小程序', color: '#000000' },
    { value: 'qq', label: 'QQ小程序', color: '#12b7f5' },
];

export const CodeGenerationPanel: React.FC = () => {
    const { currentPage } = useEditorStore();
    const {
        isGenerating,
        generatedCode,
        generatePageCode,
        generateAndDownload,
        previewCode,
        validatePage,
        clearGenerated,
    } = useCodeGeneration();

    const [selectedPlatform, setSelectedPlatform] = useState<TargetPlatform>('weapp');
    const [config, setConfig] = useState<CodeGenerationConfig>({
        targetPlatform: 'weapp',
        outputDir: './dist',
        projectName: 'lowcode-app',
        version: '1.0.0',
        author: 'LowCode Platform',
        description: 'Generated by LowCode Platform',
    });
    const [showCodePreview, setShowCodePreview] = useState(false);

    const handlePlatformChange = (platform: TargetPlatform) => {
        setSelectedPlatform(platform);
        setConfig(prev => ({ ...prev, targetPlatform: platform }));
        clearGenerated();
    };

    const handleGenerateCode = async () => {
        if (!currentPage) {
            return;
        }

        if (!validatePage(currentPage, selectedPlatform)) {
            return;
        }

        await generatePageCode(currentPage, selectedPlatform);
        setShowCodePreview(true);
    };

    const handlePreviewCode = async () => {
        if (!currentPage) {
            return;
        }

        await previewCode(currentPage, selectedPlatform);
        setShowCodePreview(true);
    };

    const handleDownloadProject = async () => {
        if (!currentPage) {
            return;
        }

        if (!validatePage(currentPage, selectedPlatform)) {
            return;
        }

        await generateAndDownload([currentPage], selectedPlatform, config);
    };

    const selectedPlatformInfo = PLATFORMS.find(p => p.value === selectedPlatform);

    return (
        <Box sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}>
            <Typography variant="h6" gutterBottom>
                代码生成
            </Typography>

            {/* 平台选择 */}
            <Paper sx={{ p: 2, mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                    目标平台
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    {PLATFORMS.map((platform) => (
                        <Chip
                            key={platform.value}
                            label={platform.label}
                            onClick={() => handlePlatformChange(platform.value)}
                            variant={selectedPlatform === platform.value ? 'filled' : 'outlined'}
                            sx={{
                                borderColor: platform.color,
                                color: selectedPlatform === platform.value ? 'white' : platform.color,
                                backgroundColor: selectedPlatform === platform.value ? platform.color : 'transparent',
                            }}
                        />
                    ))}
                </Box>
            </Paper>

            {/* 项目配置 */}
            <Paper sx={{ p: 2, mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                    项目配置
                </Typography>
                <Stack spacing={2}>
                    <TextField
                        label="项目名称"
                        size="small"
                        value={config.projectName}
                        onChange={(e) => setConfig(prev => ({ ...prev, projectName: e.target.value }))}
                    />
                    <TextField
                        label="版本号"
                        size="small"
                        value={config.version}
                        onChange={(e) => setConfig(prev => ({ ...prev, version: e.target.value }))}
                    />
                    <TextField
                        label="作者"
                        size="small"
                        value={config.author}
                        onChange={(e) => setConfig(prev => ({ ...prev, author: e.target.value }))}
                    />
                    <TextField
                        label="描述"
                        size="small"
                        multiline
                        rows={2}
                        value={config.description}
                        onChange={(e) => setConfig(prev => ({ ...prev, description: e.target.value }))}
                    />
                </Stack>
            </Paper>

            {/* 操作按钮 */}
            <Stack spacing={1} sx={{ mb: 2 }}>
                <Button
                    variant="outlined"
                    startIcon={<Preview />}
                    onClick={handlePreviewCode}
                    disabled={!currentPage || isGenerating}
                    fullWidth
                >
                    预览代码
                </Button>

                <Button
                    variant="contained"
                    startIcon={<Code />}
                    onClick={handleGenerateCode}
                    disabled={!currentPage || isGenerating}
                    fullWidth
                >
                    生成代码
                </Button>

                <Button
                    variant="contained"
                    color="success"
                    startIcon={<Download />}
                    onClick={handleDownloadProject}
                    disabled={!currentPage || isGenerating}
                    fullWidth
                >
                    下载项目
                </Button>
            </Stack>

            {/* 当前选择的平台信息 */}
            {selectedPlatformInfo && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: `${selectedPlatformInfo.color}10` }}>
                    <Typography variant="subtitle2" color={selectedPlatformInfo.color}>
                        当前平台: {selectedPlatformInfo.label}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                        将生成适配该平台的代码和配置文件
                    </Typography>
                </Paper>
            )}

            {/* 加载状态 */}
            {isGenerating && (
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                    <CircularProgress size={16} />
                    <Typography variant="body2" color="text.secondary">
                        正在生成代码...
                    </Typography>
                </Box>
            )}

            {/* 代码预览 */}
            {showCodePreview && generatedCode && (
                <Paper
                    sx={{
                        p: 2,
                        flex: 1,
                        overflow: 'auto',
                        backgroundColor: '#f5f5f5',
                        fontFamily: 'monospace'
                    }}
                >
                    <Typography variant="subtitle2" gutterBottom>
                        生成的代码预览
                    </Typography>
                    <Box
                        component="pre"
                        sx={{
                            margin: 0,
                            fontSize: '12px',
                            lineHeight: 1.4,
                            whiteSpace: 'pre-wrap',
                            wordBreak: 'break-word',
                        }}
                    >
                        {generatedCode}
                    </Box>
                </Paper>
            )}

            {/* 页面为空提示 */}
            {!currentPage && (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                    <Typography variant="body2" color="text.secondary">
                        请先创建或加载一个页面
                    </Typography>
                </Box>
            )}
        </Box>
    );
};
