/**
 * 模板生成器
 * 根据AST生成最终的代码文件
 */

import { ASTNode, CodeGenerationConfig, GenerationContext } from './types';

/**
 * 生成Taro组件代码
 */
export function generateComponentCode(
    ast: ASTNode,
    context: GenerationContext,
    componentName: string = 'Page'
): string {
    const imports = generateImports(context);
    const componentBody = generateJSXFromAST(ast);

    return `${imports}

import { FC } from 'react';
import './index.scss';

interface ${componentName}Props {
  // 组件属性类型定义
}

const ${componentName}: FC<${componentName}Props> = (props) => {
  return (
    ${componentBody}
  );
};

export default ${componentName};`;
}

/**
 * 生成导入语句
 */
function generateImports(context: GenerationContext): string {
    const imports: string[] = [];

    // 使用新的 context.imports 结构：模块路径 -> 具名组件集合
    for (const [modulePath, componentSet] of Object.entries(context.imports)) {
        const components = Array.from(componentSet).sort();
        if (components.length > 0) {
            imports.push(`import { ${components.join(', ')} } from '${modulePath}';`);
        } else {
            imports.push(`import '${modulePath}';`);
        }
    }

    return imports.join('\\n');
}

/**
 * 从AST生成JSX代码
 */
function generateJSXFromAST(node: ASTNode, indent: number = 2): string {
    const spaces = ' '.repeat(indent);

    if (node.type === 'text') {
        return `${spaces}"${node.tagName}"`;
    }

    const tagName = node.tagName;
    const props = generatePropsString(node.props);
    const styles = generateStylesString(node.styles);

    // 合并props和styles
    const allProps = [props, styles].filter(Boolean).join(' ');

    if (node.children.length === 0) {
        // 自闭合标签
        return `${spaces}<${tagName}${allProps ? ' ' + allProps : ''} />`;
    }

    // 生成子元素
    const children = node.children
        .map(child => generateJSXFromAST(child, indent + 2))
        .join('\\n');

    return `${spaces}<${tagName}${allProps ? ' ' + allProps : ''}>
${children}
${spaces}</${tagName}>`;
}

/**
 * 生成属性字符串
 */
function generatePropsString(props: Record<string, any>): string {
    return Object.entries(props)
        .map(([key, value]) => {
            if (typeof value === 'string') {
                return `${key}="${value}"`;
            } else if (typeof value === 'boolean') {
                return value ? key : '';
            } else {
                return `${key}={${JSON.stringify(value)}}`;
            }
        })
        .filter(Boolean)
        .join(' ');
}

/**
 * 生成样式字符串
 */
function generateStylesString(styles: Record<string, any>): string {
    if (Object.keys(styles).length === 0) {
        return '';
    }

    const styleObj = JSON.stringify(styles, null, 2)
        .replace(/"/g, "'")
        .replace(/\\n/g, ' ');

    return `style={${styleObj}}`;
}

/**
 * 生成样式文件
 */
export function generateStyleFile(styles: Record<string, any>): string {
    const cssRules = Object.entries(styles)
        .map(([selector, rules]) => {
            const cssProps = Object.entries(rules as Record<string, any>)
                .map(([prop, value]) => `  ${prop}: ${value};`)
                .join('\\n');

            return `${selector} {\\n${cssProps}\\n}`;
        })
        .join('\\n\\n');

    return cssRules;
}

/**
 * 生成应用配置文件
 */
export function generateAppConfig(config: CodeGenerationConfig): string {
    const appConfig = {
        pages: ['pages/index/index'],
        window: {
            backgroundTextStyle: 'light',
            navigationBarBackgroundColor: '#fff',
            navigationBarTitleText: config.projectName || 'LowCode App',
            navigationBarTextStyle: 'black'
        }
    };

    return `export default ${JSON.stringify(appConfig, null, 2)};`;
}

/**
 * 生成项目配置文件
 */
export function generateProjectConfig(config: CodeGenerationConfig): string {
    const projectConfig = {
        miniprogramRoot: 'dist/',
        projectname: config.projectName,
        description: config.description || 'Generated by LowCode Platform',
        appid: 'your-app-id',
        setting: {
            urlCheck: false,
            es6: false,
            enhance: false,
            postcss: false,
            preloadBackgroundData: false,
            minified: false,
            newFeature: false,
            coverView: true,
            nodeModules: false,
            autoAudits: false,
            showShadowRootInWxmlPanel: true,
            scopeDataCheck: false,
            uglifyFileName: false,
            checkInvalidKey: true,
            checkSiteMap: true,
            uploadWithSourceMap: true,
            compileHotReLoad: false,
            lazyloadPlaceholderEnable: false,
            useMultiFrameRuntime: true,
            useApiHook: true,
            useApiHostProcess: true,
            babelSetting: {
                ignore: [],
                disablePlugins: [],
                outputPath: ''
            },
            enableEngineNative: false,
            useIsolateContext: true,
            userConfirmedBundleSwitch: false,
            packNpmManually: false,
            packNpmRelationList: [],
            minifyWXSS: true,
            disableUseStrict: false,
            minifyWXML: true,
            showES6CompileOption: false,
            useCompilerPlugins: false
        }
    };

    return JSON.stringify(projectConfig, null, 2);
}

/**
 * 生成package.json
 */
export function generatePackageJson(config: CodeGenerationConfig): string {
    const packageJson = {
        name: config.projectName,
        version: config.version || '1.0.0',
        description: config.description || 'Generated by LowCode Platform',
        main: 'index.js',
        scripts: {
            'build:weapp': 'taro build --type weapp',
            'build:alipay': 'taro build --type alipay',
            'build:h5': 'taro build --type h5',
            'build:rn': 'taro build --type rn',
            'dev:weapp': 'npm run build:weapp -- --watch',
            'dev:alipay': 'npm run build:alipay -- --watch',
            'dev:h5': 'npm run build:h5 -- --watch',
            'dev:rn': 'npm run build:rn -- --watch'
        },
        dependencies: {
            '@tarojs/components': '^3.6.0',
            '@tarojs/runtime': '^3.6.0',
            '@tarojs/taro': '^3.6.0',
            'react': '^18.0.0',
            'react-dom': '^18.0.0'
        },
        devDependencies: {
            '@tarojs/cli': '^3.6.0',
            '@tarojs/webpack5-runner': '^3.6.0',
            '@typescript-eslint/eslint-plugin': '^5.20.0',
            '@typescript-eslint/parser': '^5.20.0',
            'eslint': '^8.12.0',
            'eslint-plugin-react': '^7.29.4',
            'eslint-plugin-react-hooks': '^4.4.0',
            'typescript': '^4.7.0'
        },
        author: config.author || 'LowCode Platform',
        license: 'MIT'
    };

    return JSON.stringify(packageJson, null, 2);
}

/**
 * 生成TypeScript配置文件
 */
export function generateTsConfig(): string {
    const tsConfig = {
        compilerOptions: {
            target: 'es2017',
            lib: ['es2018', 'dom'],
            allowJs: true,
            skipLibCheck: true,
            esModuleInterop: true,
            allowSyntheticDefaultImports: true,
            strict: true,
            forceConsistentCasingInFileNames: true,
            module: 'esnext',
            moduleResolution: 'node',
            resolveJsonModule: true,
            isolatedModules: true,
            noEmit: true,
            jsx: 'react-jsx'
        },
        include: ['src/**/*'],
        exclude: ['node_modules']
    };

    return JSON.stringify(tsConfig, null, 2);
}
