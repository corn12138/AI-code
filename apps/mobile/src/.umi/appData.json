{
  "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
  "pkg": {
    "name": "mobile",
    "private": true,
    "version": "0.1.0",
    "scripts": {
      "dev": "umi dev",
      "build": "umi build",
      "preview": "umi preview",
      "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
      "test": "vitest",
      "test:watch": "vitest --watch",
      "test:ui": "vitest --ui",
      "test:coverage": "vitest --coverage",
      "test:run": "vitest run",
      "type-check": "tsc --noEmit",
      "setup": "umi setup"
    },
    "dependencies": {
      "@corn12138/hooks": "workspace:*",
      "@shared/auth": "workspace:*",
      "@shared/ui": "workspace:*",
      "@shared/utils": "workspace:*",
      "antd-mobile": "^5.37.1",
      "antd-mobile-icons": "^0.3.0",
      "axios": "^1.7.7",
      "classnames": "^2.5.1",
      "dayjs": "^1.11.13",
      "react": "^18.3.1",
      "react-dom": "^18.3.1",
      "react-hot-toast": "^2.5.2",
      "zustand": "^4.5.5"
    },
    "devDependencies": {
      "@testing-library/jest-dom": "^6.4.2",
      "@testing-library/react": "^14.2.1",
      "@testing-library/user-event": "^14.5.2",
      "@types/react": "^18.3.17",
      "@types/react-dom": "^18.3.2",
      "@typescript-eslint/eslint-plugin": "^6.21.0",
      "@typescript-eslint/parser": "^6.21.0",
      "@umijs/plugins": "^4.3.11",
      "@vitest/ui": "^1.3.1",
      "@vitest/coverage-v8": "^1.3.1",
      "eslint": "^8.57.1",
      "eslint-plugin-react-hooks": "^4.6.2",
      "jsdom": "^24.0.0",
      "postcss": "^8.4.49",
      "tailwindcss": "^3.4.15",
      "typescript": "^5.7.2",
      "umi": "^4.3.11",
      "vconsole": "^3.15.1",
      "vitest": "^1.3.1"
    }
  },
  "pkgPath": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/package.json",
  "plugins": {
    "@umijs/core/dist/service/servicePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+core@4.4.11/node_modules/@umijs/core/dist/service/servicePlugin.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/core/dist/service/servicePlugin",
      "key": "servicePlugin"
    },
    "@umijs/preset-umi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 10
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/index.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi",
      "key": "umi"
    },
    "@umijs/preset-umi/dist/registerMethods": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/registerMethods.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/registerMethods",
      "key": "registerMethods"
    },
    "@umijs/did-you-know": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            1
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+did-you-know@1.0.3/node_modules/@umijs/did-you-know/dist/plugin.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/did-you-know",
      "key": "umijsDidYouKnow"
    },
    "@umijs/preset-umi/dist/features/404/404": {
      "config": {},
      "time": {
        "hooks": {
          "modifyRoutes": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/404/404.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/404/404",
      "key": "404"
    },
    "@umijs/preset-umi/dist/features/appData/appData": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            25
          ]
        },
        "register": 13
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/appData/appData.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/appData/appData",
      "key": "appData"
    },
    "@umijs/preset-umi/dist/features/appData/umiInfo": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/appData/umiInfo.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/appData/umiInfo",
      "key": "umiInfo"
    },
    "@umijs/preset-umi/dist/features/check/check": {
      "config": {},
      "time": {
        "hooks": {
          "onCheckConfig": [
            0
          ],
          "onCheck": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/check/check.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/check/check",
      "key": "check"
    },
    "@umijs/preset-umi/dist/features/check/babel722": {
      "config": {},
      "time": {
        "hooks": {
          "onCheck": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/check/babel722.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/check/babel722",
      "key": "babel722"
    },
    "@umijs/preset-umi/dist/features/codeSplitting/codeSplitting": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/codeSplitting/codeSplitting",
      "key": "codeSplitting"
    },
    "@umijs/preset-umi/dist/features/configPlugins/configPlugins": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ]
        },
        "register": 7
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/configPlugins/configPlugins",
      "key": "configPlugins"
    },
    "virtual: config-title": {
      "id": "virtual: config-title",
      "key": "title",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styles": {
      "id": "virtual: config-styles",
      "key": "styles",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-scripts": {
      "id": "virtual: config-scripts",
      "key": "scripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routes": {
      "id": "virtual: config-routes",
      "key": "routes",
      "config": {
        "onChange": "regenerateTmpFiles"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routeLoader": {
      "id": "virtual: config-routeLoader",
      "key": "routeLoader",
      "config": {
        "default": {
          "moduleType": "esm"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-reactRouter5Compat": {
      "id": "virtual: config-reactRouter5Compat",
      "key": "reactRouter5Compat",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-presets": {
      "id": "virtual: config-presets",
      "key": "presets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-plugins": {
      "id": "virtual: config-plugins",
      "key": "plugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-npmClient": {
      "id": "virtual: config-npmClient",
      "key": "npmClient",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mountElementId": {
      "id": "virtual: config-mountElementId",
      "key": "mountElementId",
      "config": {
        "default": "root"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-metas": {
      "id": "virtual: config-metas",
      "key": "metas",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-links": {
      "id": "virtual: config-links",
      "key": "links",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-historyWithQuery": {
      "id": "virtual: config-historyWithQuery",
      "key": "historyWithQuery",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-history": {
      "id": "virtual: config-history",
      "key": "history",
      "config": {
        "default": {
          "type": "browser"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-headScripts": {
      "id": "virtual: config-headScripts",
      "key": "headScripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esbuildMinifyIIFE": {
      "id": "virtual: config-esbuildMinifyIIFE",
      "key": "esbuildMinifyIIFE",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionRoutes": {
      "id": "virtual: config-conventionRoutes",
      "key": "conventionRoutes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionLayout": {
      "id": "virtual: config-conventionLayout",
      "key": "conventionLayout",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-base": {
      "id": "virtual: config-base",
      "key": "base",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-analyze": {
      "id": "virtual: config-analyze",
      "key": "analyze",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-writeToDisk": {
      "id": "virtual: config-writeToDisk",
      "key": "writeToDisk",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-transformRuntime": {
      "id": "virtual: config-transformRuntime",
      "key": "transformRuntime",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-theme": {
      "id": "virtual: config-theme",
      "key": "theme",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-targets": {
      "id": "virtual: config-targets",
      "key": "targets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgr": {
      "id": "virtual: config-svgr",
      "key": "svgr",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgo": {
      "id": "virtual: config-svgo",
      "key": "svgo",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-stylusLoader": {
      "id": "virtual: config-stylusLoader",
      "key": "stylusLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styleLoader": {
      "id": "virtual: config-styleLoader",
      "key": "styleLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspilerOptions": {
      "id": "virtual: config-srcTranspilerOptions",
      "key": "srcTranspilerOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspiler": {
      "id": "virtual: config-srcTranspiler",
      "key": "srcTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-sassLoader": {
      "id": "virtual: config-sassLoader",
      "key": "sassLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-runtimePublicPath": {
      "id": "virtual: config-runtimePublicPath",
      "key": "runtimePublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-purgeCSS": {
      "id": "virtual: config-purgeCSS",
      "key": "purgeCSS",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-publicPath": {
      "id": "virtual: config-publicPath",
      "key": "publicPath",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-proxy": {
      "id": "virtual: config-proxy",
      "key": "proxy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-postcssLoader": {
      "id": "virtual: config-postcssLoader",
      "key": "postcssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-outputPath": {
      "id": "virtual: config-outputPath",
      "key": "outputPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-normalCSSLoaderModules": {
      "id": "virtual: config-normalCSSLoaderModules",
      "key": "normalCSSLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mfsu": {
      "id": "virtual: config-mfsu",
      "key": "mfsu",
      "config": {
        "default": {
          "strategy": "eager"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mdx": {
      "id": "virtual: config-mdx",
      "key": "mdx",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-manifest": {
      "id": "virtual: config-manifest",
      "key": "manifest",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-lessLoader": {
      "id": "virtual: config-lessLoader",
      "key": "lessLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifierOptions": {
      "id": "virtual: config-jsMinifierOptions",
      "key": "jsMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifier": {
      "id": "virtual: config-jsMinifier",
      "key": "jsMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-inlineLimit": {
      "id": "virtual: config-inlineLimit",
      "key": "inlineLimit",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-ignoreMomentLocale": {
      "id": "virtual: config-ignoreMomentLocale",
      "key": "ignoreMomentLocale",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-https": {
      "id": "virtual: config-https",
      "key": "https",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-hash": {
      "id": "virtual: config-hash",
      "key": "hash",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-forkTSChecker": {
      "id": "virtual: config-forkTSChecker",
      "key": "forkTSChecker",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-fastRefresh": {
      "id": "virtual: config-fastRefresh",
      "key": "fastRefresh",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraPostCSSPlugins": {
      "id": "virtual: config-extraPostCSSPlugins",
      "key": "extraPostCSSPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPresets": {
      "id": "virtual: config-extraBabelPresets",
      "key": "extraBabelPresets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPlugins": {
      "id": "virtual: config-extraBabelPlugins",
      "key": "extraBabelPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelIncludes": {
      "id": "virtual: config-extraBabelIncludes",
      "key": "extraBabelIncludes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-externals": {
      "id": "virtual: config-externals",
      "key": "externals",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esm": {
      "id": "virtual: config-esm",
      "key": "esm",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-devtool": {
      "id": "virtual: config-devtool",
      "key": "devtool",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-depTranspiler": {
      "id": "virtual: config-depTranspiler",
      "key": "depTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-define": {
      "id": "virtual: config-define",
      "key": "define",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-deadCode": {
      "id": "virtual: config-deadCode",
      "key": "deadCode",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssPublicPath": {
      "id": "virtual: config-cssPublicPath",
      "key": "cssPublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifierOptions": {
      "id": "virtual: config-cssMinifierOptions",
      "key": "cssMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifier": {
      "id": "virtual: config-cssMinifier",
      "key": "cssMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoaderModules": {
      "id": "virtual: config-cssLoaderModules",
      "key": "cssLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoader": {
      "id": "virtual: config-cssLoader",
      "key": "cssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-copy": {
      "id": "virtual: config-copy",
      "key": "copy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-checkDepCssModules": {
      "id": "virtual: config-checkDepCssModules",
      "key": "checkDepCssModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-chainWebpack": {
      "id": "virtual: config-chainWebpack",
      "key": "chainWebpack",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cacheDirectoryPath": {
      "id": "virtual: config-cacheDirectoryPath",
      "key": "cacheDirectoryPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-babelLoaderCustomize": {
      "id": "virtual: config-babelLoaderCustomize",
      "key": "babelLoaderCustomize",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoprefixer": {
      "id": "virtual: config-autoprefixer",
      "key": "autoprefixer",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoCSSModules": {
      "id": "virtual: config-autoCSSModules",
      "key": "autoCSSModules",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-alias": {
      "id": "virtual: config-alias",
      "key": "alias",
      "config": {
        "default": {
          "umi": "@@/exports",
          "react": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react",
          "react-dom": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react-dom",
          "react-router": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/react-router@6.3.0_react@18.3.1/node_modules/react-router",
          "react-router-dom": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/react-router-dom@6.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router-dom"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "@umijs/preset-umi/dist/features/crossorigin/crossorigin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/crossorigin/crossorigin",
      "key": "crossorigin"
    },
    "@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand",
      "key": "depsOnDemand"
    },
    "@umijs/preset-umi/dist/features/devTool/devTool": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/devTool/devTool.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/devTool/devTool",
      "key": "devTool"
    },
    "@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 42
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker",
      "key": "esbuildHelperChecker"
    },
    "@umijs/preset-umi/dist/features/esmi/esmi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 55
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/esmi/esmi.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/esmi/esmi",
      "key": "esmi"
    },
    "@umijs/preset-umi/dist/features/exportStatic/exportStatic": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 12
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/exportStatic/exportStatic",
      "key": "exportStatic"
    },
    "@umijs/preset-umi/dist/features/favicons/favicons": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/favicons/favicons.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/favicons/favicons",
      "key": "favicons"
    },
    "@umijs/preset-umi/dist/features/helmet/helmet": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/helmet/helmet.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/helmet/helmet",
      "key": "helmet"
    },
    "@umijs/preset-umi/dist/features/icons/icons": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/icons/icons.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/icons/icons",
      "key": "icons"
    },
    "@umijs/preset-umi/dist/features/mock/mock": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            1
          ]
        },
        "register": 19
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/mock/mock.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/mock/mock",
      "key": "mock"
    },
    "@umijs/preset-umi/dist/features/mpa/mpa": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/mpa/mpa.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/mpa/mpa",
      "key": "mpa"
    },
    "@umijs/preset-umi/dist/features/okam/okam": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/okam/okam.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/okam/okam",
      "key": "okam"
    },
    "@umijs/preset-umi/dist/features/overrides/overrides": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/overrides/overrides.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/overrides/overrides",
      "key": "overrides"
    },
    "@umijs/preset-umi/dist/features/phantomDependency/phantomDependency": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/phantomDependency/phantomDependency",
      "key": "phantomDependency"
    },
    "@umijs/preset-umi/dist/features/polyfill/polyfill": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            1
          ]
        },
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/polyfill/polyfill",
      "key": "polyfill"
    },
    "@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill",
      "key": "publicPathPolyfill"
    },
    "@umijs/preset-umi/dist/features/prepare/prepare": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/prepare/prepare.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/prepare/prepare",
      "key": "prepare"
    },
    "@umijs/preset-umi/dist/features/routePrefetch/routePrefetch": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/routePrefetch/routePrefetch",
      "key": "routePrefetch"
    },
    "@umijs/preset-umi/dist/features/terminal/terminal": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/terminal/terminal.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/terminal/terminal",
      "key": "terminal"
    },
    "@umijs/preset-umi/dist/features/tmpFiles/tmpFiles": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/tmpFiles/tmpFiles",
      "key": "tmpFiles"
    },
    "@umijs/preset-umi/dist/features/clientLoader/clientLoader": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/clientLoader/clientLoader",
      "key": "clientLoader"
    },
    "@umijs/preset-umi/dist/features/routeProps/routeProps": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/routeProps/routeProps",
      "key": "routeProps"
    },
    "@umijs/preset-umi/dist/features/ssr/ssr": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/ssr/ssr.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/ssr/ssr",
      "key": "ssr"
    },
    "@umijs/preset-umi/dist/features/tmpFiles/configTypes": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/tmpFiles/configTypes",
      "key": "configTypes"
    },
    "@umijs/preset-umi/dist/features/transform/transform": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 4
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/transform/transform.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/transform/transform",
      "key": "transform"
    },
    "@umijs/preset-umi/dist/features/lowImport/lowImport": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/lowImport/lowImport",
      "key": "lowImport"
    },
    "@umijs/preset-umi/dist/features/vite/vite": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/vite/vite.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/vite/vite",
      "key": "vite"
    },
    "@umijs/preset-umi/dist/features/apiRoute/apiRoute": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/apiRoute/apiRoute",
      "key": "apiRoute"
    },
    "@umijs/preset-umi/dist/features/monorepo/redirect": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 13
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/monorepo/redirect.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/monorepo/redirect",
      "key": "monorepoRedirect"
    },
    "@umijs/preset-umi/dist/features/test/test": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/test/test.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/test/test",
      "key": "test"
    },
    "@umijs/preset-umi/dist/features/clickToComponent/clickToComponent": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/clickToComponent/clickToComponent",
      "key": "clickToComponent"
    },
    "@umijs/preset-umi/dist/features/legacy/legacy": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/legacy/legacy.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/legacy/legacy",
      "key": "legacy"
    },
    "@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose",
      "key": "classPropertiesLoose"
    },
    "@umijs/preset-umi/dist/features/webpack/webpack": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/webpack/webpack.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/webpack/webpack",
      "key": "preset-umi:webpack"
    },
    "@umijs/preset-umi/dist/features/swc/swc": {
      "config": {},
      "time": {
        "hooks": {
          "addOnDemandDeps": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/swc/swc.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/swc/swc",
      "key": "swc"
    },
    "@umijs/preset-umi/dist/features/ui/ui": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/ui/ui.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/ui/ui",
      "key": "ui"
    },
    "@umijs/preset-umi/dist/features/mako/mako": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/mako/mako.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/mako/mako",
      "key": "mako"
    },
    "@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian",
      "key": "hmrGuardian"
    },
    "@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad",
      "key": "routePreloadOnLoad"
    },
    "@umijs/preset-umi/dist/features/forget/forget": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/forget/forget.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/forget/forget",
      "key": "forget"
    },
    "@umijs/preset-umi/dist/features/bundler/bundler": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/features/bundler/bundler.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/features/bundler/bundler",
      "key": "preset-umi:bundler"
    },
    "@umijs/preset-umi/dist/commands/build": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/build.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/build",
      "key": "build"
    },
    "@umijs/preset-umi/dist/commands/config/config": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 19
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/config/config.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/config/config",
      "key": "config"
    },
    "@umijs/preset-umi/dist/commands/dev/dev": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            8
          ],
          "onStart": [
            0
          ]
        },
        "register": 17
      },
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/dev/dev.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/dev/dev",
      "key": "dev"
    },
    "@umijs/preset-umi/dist/commands/help": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/help.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/help",
      "key": "help"
    },
    "@umijs/preset-umi/dist/commands/lint": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/lint.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/lint",
      "key": "lint"
    },
    "@umijs/preset-umi/dist/commands/setup": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/setup.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/setup",
      "key": "setup"
    },
    "@umijs/preset-umi/dist/commands/deadcode": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/deadcode.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/deadcode",
      "key": "deadcode"
    },
    "@umijs/preset-umi/dist/commands/version": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/version.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/version",
      "key": "version"
    },
    "@umijs/preset-umi/dist/commands/generators/page": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/page.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/page",
      "key": "generator:page"
    },
    "@umijs/preset-umi/dist/commands/generators/prettier": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/prettier.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/prettier",
      "key": "generator:prettier"
    },
    "@umijs/preset-umi/dist/commands/generators/tsconfig": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/tsconfig",
      "key": "generator:tsconfig"
    },
    "@umijs/preset-umi/dist/commands/generators/jest": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/jest.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/jest",
      "key": "generator:jest"
    },
    "@umijs/preset-umi/dist/commands/generators/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/tailwindcss",
      "key": "generator:tailwindcss"
    },
    "@umijs/preset-umi/dist/commands/generators/dva": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/dva.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/dva",
      "key": "generator:dva"
    },
    "@umijs/preset-umi/dist/commands/generators/component": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/component.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/component",
      "key": "generator:component"
    },
    "@umijs/preset-umi/dist/commands/generators/mock": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/mock.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/mock",
      "key": "generator:mock"
    },
    "@umijs/preset-umi/dist/commands/generators/cypress": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/cypress.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/cypress",
      "key": "generator:cypress"
    },
    "@umijs/preset-umi/dist/commands/generators/api": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/api.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/api",
      "key": "generator:api"
    },
    "@umijs/preset-umi/dist/commands/generators/precommit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/generators/precommit.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/generators/precommit",
      "key": "generator:precommit"
    },
    "@umijs/preset-umi/dist/commands/plugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/plugin.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/plugin",
      "key": "command:plugin"
    },
    "@umijs/preset-umi/dist/commands/verify-commit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/verify-commit.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/verify-commit",
      "key": "verifyCommit"
    },
    "@umijs/preset-umi/dist/commands/preview": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 15
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/preview.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/preview",
      "key": "preview"
    },
    "@umijs/preset-umi/dist/commands/mfsu/mfsu": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+preset-umi@4.4.11_@types+node@20.17.46_@types+react@18.3.21_lightningcss@1.22.1__851f75b8885b4be28998b8bb76307693/node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/preset-umi/dist/commands/mfsu/mfsu",
      "key": "mfsu-cli"
    },
    "@umijs/plugin-run": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+plugin-run@4.4.11/node_modules/@umijs/plugin-run/dist/index.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/plugin-run",
      "key": "run"
    },
    "@umijs/core/dist/service/generatePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/@umijs+core@4.4.11/node_modules/@umijs/core/dist/service/generatePlugin.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "@umijs/core/dist/service/generatePlugin",
      "key": "generatePlugin"
    },
    "./node_modules/@umijs/plugins/dist/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/@umijs/plugins/dist/tailwindcss.js",
      "cwd": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile",
      "id": "./node_modules/@umijs/plugins/dist/tailwindcss",
      "key": "tailwindcss"
    }
  },
  "presets": [],
  "name": "dev",
  "args": {
    "_": []
  },
  "userConfig": {
    "routes": [
      {
        "path": "/login",
        "component": "@/pages/Auth/Login",
        "layout": false,
        "meta": {
          "title": "登录",
          "requireAuth": false
        }
      },
      {
        "path": "/register",
        "component": "@/pages/Auth/Register",
        "layout": false,
        "meta": {
          "title": "注册",
          "requireAuth": false
        }
      },
      {
        "path": "/forgot-password",
        "component": "@/pages/Auth/ForgotPassword",
        "layout": false,
        "meta": {
          "title": "忘记密码",
          "requireAuth": false
        }
      },
      {
        "path": "/",
        "component": "@/components/Layout/Layout",
        "meta": {
          "requireAuth": true
        },
        "routes": [
          {
            "path": "/",
            "component": "@/pages/Home/Home",
            "meta": {
              "title": "首页",
              "icon": "home",
              "keepAlive": true
            }
          },
          {
            "path": "/network-test",
            "component": "@/pages/NetworkTest",
            "meta": {
              "title": "网络/桥接测试",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/device-test",
            "component": "@/pages/DeviceTest",
            "meta": {
              "title": "设备能力测试",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/bridge-test",
            "component": "@/pages/BridgeTest",
            "meta": {
              "title": "桥接能力演示",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/apps",
            "component": "@/pages/Apps/Apps",
            "meta": {
              "title": "应用",
              "icon": "apps",
              "keepAlive": true
            }
          },
          {
            "path": "/message",
            "component": "@/pages/Message/Message",
            "meta": {
              "title": "消息",
              "icon": "message",
              "keepAlive": true
            }
          },
          {
            "path": "/profile",
            "component": "@/pages/Profile/Profile",
            "meta": {
              "title": "我的",
              "icon": "profile",
              "keepAlive": true
            }
          },
          {
            "path": "/settings",
            "component": "@/pages/Settings/Settings",
            "meta": {
              "title": "设置",
              "requireAuth": true
            }
          },
          {
            "path": "/notifications",
            "component": "@/pages/Notifications/Notifications",
            "meta": {
              "title": "通知",
              "requireAuth": true
            }
          },
          {
            "path": "/documents",
            "component": "@/pages/Documents/Documents",
            "meta": {
              "title": "文档",
              "requireAuth": true
            }
          },
          {
            "path": "/checkin",
            "component": "@/pages/Checkin/Checkin",
            "meta": {
              "title": "打卡",
              "requireAuth": true
            }
          },
          {
            "path": "/task-process",
            "component": "@/pages/TaskProcess/TaskList",
            "meta": {
              "title": "任务处理",
              "requireAuth": true
            }
          },
          {
            "path": "/apps/:id",
            "component": "@/pages/Apps/AppDetail",
            "meta": {
              "title": "应用详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/task-process/detail/:id",
            "component": "@/pages/TaskProcess/TaskDetail",
            "meta": {
              "title": "任务详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/task-process/file-list",
            "component": "@/pages/TaskProcess/FileList",
            "meta": {
              "title": "文件列表",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/message/:id",
            "component": "@/pages/Message/MessageDetail",
            "meta": {
              "title": "消息详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/profile/edit",
            "component": "@/pages/Profile/EditProfile",
            "meta": {
              "title": "编辑资料",
              "requireAuth": true,
              "hidden": true
            }
          }
        ]
      },
      {
        "path": "/404",
        "component": "@/pages/NotFound/NotFound",
        "layout": false,
        "meta": {
          "title": "页面不存在",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "/403",
        "component": "@/pages/Error/Forbidden",
        "layout": false,
        "meta": {
          "title": "访问被拒绝",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "/500",
        "component": "@/pages/Error/ServerError",
        "layout": false,
        "meta": {
          "title": "服务器错误",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "*",
        "redirect": "/404"
      }
    ],
    "outputPath": "dist",
    "publicPath": "/",
    "hash": false,
    "proxy": {
      "/api": {
        "target": "http://localhost:3001",
        "changeOrigin": true,
        "pathRewrite": {
          "^/api": "/api"
        }
      }
    },
    "plugins": [
      "@umijs/plugins/dist/tailwindcss"
    ],
    "tailwindcss": {},
    "title": "移动端应用",
    "alias": {
      "@": "./src",
      "@components": "./src/components",
      "@pages": "./src/pages",
      "@utils": "./src/utils",
      "@hooks": "./src/hooks",
      "@store": "./src/store",
      "@types": "./src/types",
      "@services": "./src/services",
      "antd-mobile-icons$": "@/shims/antd-mobile-icons-compat",
      "antd-mobile$": "@/shims/antd-mobile-compat"
    },
    "fastRefresh": true,
    "targets": {
      "chrome": 80,
      "firefox": 72,
      "safari": 12,
      "edge": 80,
      "ios": 12,
      "android": "7"
    },
    "define": {
      "process.env.NODE_ENV": "\"development\""
    },
    "metas": [
      {
        "name": "viewport",
        "content": "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
      }
    ],
    "jsMinifier": "terser"
  },
  "mainConfigFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/.umirc.ts",
  "config": {
    "routeLoader": {
      "moduleType": "esm"
    },
    "mountElementId": "root",
    "history": {
      "type": "browser"
    },
    "base": "/",
    "svgr": {},
    "publicPath": "/",
    "mfsu": {
      "strategy": "eager"
    },
    "ignoreMomentLocale": true,
    "externals": {},
    "autoCSSModules": true,
    "alias": {
      "umi": "@@/exports",
      "react": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react",
      "react-dom": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react-dom",
      "react-router": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/react-router@6.3.0_react@18.3.1/node_modules/react-router",
      "react-router-dom": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/react-router-dom@6.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router-dom",
      "@": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src",
      "@components": "./src/components",
      "@pages": "./src/pages",
      "@utils": "./src/utils",
      "@hooks": "./src/hooks",
      "@store": "./src/store",
      "@types": "./src/types",
      "@services": "./src/services",
      "antd-mobile-icons$": "@/shims/antd-mobile-icons-compat",
      "antd-mobile$": "@/shims/antd-mobile-compat",
      "@@": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/.umi",
      "regenerator-runtime": "/Users/huangyuming/Desktop/createProjects/AI-code/node_modules/.pnpm/regenerator-runtime@0.13.11/node_modules/regenerator-runtime"
    },
    "routes": [
      {
        "path": "/login",
        "component": "@/pages/Auth/Login",
        "layout": false,
        "meta": {
          "title": "登录",
          "requireAuth": false
        }
      },
      {
        "path": "/register",
        "component": "@/pages/Auth/Register",
        "layout": false,
        "meta": {
          "title": "注册",
          "requireAuth": false
        }
      },
      {
        "path": "/forgot-password",
        "component": "@/pages/Auth/ForgotPassword",
        "layout": false,
        "meta": {
          "title": "忘记密码",
          "requireAuth": false
        }
      },
      {
        "path": "/",
        "component": "@/components/Layout/Layout",
        "meta": {
          "requireAuth": true
        },
        "routes": [
          {
            "path": "/",
            "component": "@/pages/Home/Home",
            "meta": {
              "title": "首页",
              "icon": "home",
              "keepAlive": true
            }
          },
          {
            "path": "/network-test",
            "component": "@/pages/NetworkTest",
            "meta": {
              "title": "网络/桥接测试",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/device-test",
            "component": "@/pages/DeviceTest",
            "meta": {
              "title": "设备能力测试",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/bridge-test",
            "component": "@/pages/BridgeTest",
            "meta": {
              "title": "桥接能力演示",
              "requireAuth": false,
              "hidden": true
            }
          },
          {
            "path": "/apps",
            "component": "@/pages/Apps/Apps",
            "meta": {
              "title": "应用",
              "icon": "apps",
              "keepAlive": true
            }
          },
          {
            "path": "/message",
            "component": "@/pages/Message/Message",
            "meta": {
              "title": "消息",
              "icon": "message",
              "keepAlive": true
            }
          },
          {
            "path": "/profile",
            "component": "@/pages/Profile/Profile",
            "meta": {
              "title": "我的",
              "icon": "profile",
              "keepAlive": true
            }
          },
          {
            "path": "/settings",
            "component": "@/pages/Settings/Settings",
            "meta": {
              "title": "设置",
              "requireAuth": true
            }
          },
          {
            "path": "/notifications",
            "component": "@/pages/Notifications/Notifications",
            "meta": {
              "title": "通知",
              "requireAuth": true
            }
          },
          {
            "path": "/documents",
            "component": "@/pages/Documents/Documents",
            "meta": {
              "title": "文档",
              "requireAuth": true
            }
          },
          {
            "path": "/checkin",
            "component": "@/pages/Checkin/Checkin",
            "meta": {
              "title": "打卡",
              "requireAuth": true
            }
          },
          {
            "path": "/task-process",
            "component": "@/pages/TaskProcess/TaskList",
            "meta": {
              "title": "任务处理",
              "requireAuth": true
            }
          },
          {
            "path": "/apps/:id",
            "component": "@/pages/Apps/AppDetail",
            "meta": {
              "title": "应用详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/task-process/detail/:id",
            "component": "@/pages/TaskProcess/TaskDetail",
            "meta": {
              "title": "任务详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/task-process/file-list",
            "component": "@/pages/TaskProcess/FileList",
            "meta": {
              "title": "文件列表",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/message/:id",
            "component": "@/pages/Message/MessageDetail",
            "meta": {
              "title": "消息详情",
              "requireAuth": true,
              "hidden": true
            }
          },
          {
            "path": "/profile/edit",
            "component": "@/pages/Profile/EditProfile",
            "meta": {
              "title": "编辑资料",
              "requireAuth": true,
              "hidden": true
            }
          }
        ]
      },
      {
        "path": "/404",
        "component": "@/pages/NotFound/NotFound",
        "layout": false,
        "meta": {
          "title": "页面不存在",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "/403",
        "component": "@/pages/Error/Forbidden",
        "layout": false,
        "meta": {
          "title": "访问被拒绝",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "/500",
        "component": "@/pages/Error/ServerError",
        "layout": false,
        "meta": {
          "title": "服务器错误",
          "requireAuth": false,
          "hidden": true
        }
      },
      {
        "path": "*",
        "redirect": "/404"
      }
    ],
    "outputPath": "dist",
    "hash": false,
    "proxy": {
      "/api": {
        "target": "http://localhost:3001",
        "changeOrigin": true,
        "pathRewrite": {
          "^/api": "/api"
        }
      }
    },
    "plugins": [
      "@umijs/plugins/dist/tailwindcss"
    ],
    "tailwindcss": {},
    "title": "移动端应用",
    "fastRefresh": true,
    "targets": {
      "chrome": 80,
      "firefox": 72,
      "safari": 12,
      "edge": 80,
      "ios": 12,
      "android": "7"
    },
    "define": {
      "process.env.NODE_ENV": "\"development\""
    },
    "metas": [
      {
        "name": "viewport",
        "content": "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
      }
    ],
    "jsMinifier": "terser"
  },
  "routes": {
    "1": {
      "path": "/login",
      "layout": false,
      "file": "@/pages/Auth/Login.tsx",
      "id": "1",
      "absPath": "/login",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport {\n    Button,\n    Card,\n    CheckList,\n    Divider,\n    Form,\n    Input,\n    Space,\n    Toast\n} from 'antd-mobile'\nimport {\n    EyeInvisibleOutline,\n    EyeOutline,\n    LockOutline,\n    UserOutline\n} from 'antd-mobile-icons'\nimport { useState } from 'react'\nimport './Login.css'\n\nexport default function Login() {\n    const { isMobile, isTablet } = useDeviceInfo()\n\n    const [form] = Form.useForm()\n    const [loading, setLoading] = useState(false)\n    const [showPassword, setShowPassword] = useState(false)\n    const [rememberMe, setRememberMe] = useState(false)\n\n    const handleLogin = async (values: any) => {\n        setLoading(true)\n        try {\n            // TODO: 实现登录逻辑\n            console.log('Login values:', values)\n            await new Promise(resolve => setTimeout(resolve, 1000)) // 模拟API调用\n\n            Toast.show({\n                icon: 'success',\n                content: '登录成功',\n            })\n\n            history.push('/')\n        } catch (error) {\n            Toast.show({\n                icon: 'fail',\n                content: '登录失败，请检查用户名和密码',\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const handleForgotPassword = () => {\n        Toast.show('忘记密码功能待开发')\n    }\n\n    const handleRegister = () => {\n        Toast.show('注册功能待开发')\n    }\n\n    const handleQuickLogin = (type: string) => {\n        Toast.show(`${type}登录待开发`)\n    }\n\n    return (\n        <div className={`login-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"login-container\">\n                {/* 头部Logo */}\n                <div className=\"login-header\">\n                    <div className=\"logo\">\n                        <div className=\"logo-icon\">📱</div>\n                        <h1 className=\"logo-text\">移动端应用</h1>\n                    </div>\n                    <p className=\"login-subtitle\">欢迎回来，请登录您的账户</p>\n                </div>\n\n                {/* 登录表单 */}\n                <Card className=\"login-card\">\n                    <Form\n                        form={form}\n                        onFinish={handleLogin}\n                        layout=\"vertical\"\n                        footer={\n                            <Space direction=\"vertical\" block>\n                                <Button\n                                    block\n                                    type=\"submit\"\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    loading={loading}\n                                >\n                                    登录\n                                </Button>\n\n                                <div className=\"login-options\">\n                                    <CheckList\n                                        value={rememberMe ? ['remember'] : []}\n                                        onChange={(val) => setRememberMe(val.includes('remember'))}\n                                    >\n                                        <CheckList.Item value=\"remember\">记住密码</CheckList.Item>\n                                    </CheckList>\n                                    <Button\n                                        fill=\"none\"\n                                        size=\"small\"\n                                        onClick={handleForgotPassword}\n                                    >\n                                        忘记密码？\n                                    </Button>\n                                </div>\n                            </Space>\n                        }\n                    >\n                        <Form.Item\n                            name=\"username\"\n                            label=\"用户名\"\n                            rules={[\n                                { required: true, message: '请输入用户名' },\n                                { min: 3, message: '用户名至少3个字符' }\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"请输入用户名\"\n                                prefix={<UserOutline />}\n                                clearable\n                            />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"password\"\n                            label=\"密码\"\n                            rules={[\n                                { required: true, message: '请输入密码' },\n                                { min: 6, message: '密码至少6个字符' }\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"请输入密码\"\n                                type={showPassword ? 'text' : 'password'}\n                                prefix={<LockOutline />}\n                                suffix={\n                                    <div onClick={() => setShowPassword(!showPassword)}>\n                                        {showPassword ? <EyeOutline /> : <EyeInvisibleOutline />}\n                                    </div>\n                                }\n                                clearable\n                            />\n                        </Form.Item>\n                    </Form>\n                </Card>\n\n                {/* 分割线 */}\n                <Divider className=\"login-divider\">或</Divider>\n\n                {/* 快捷登录 */}\n                <Card className=\"quick-login-card\">\n                    <div className=\"quick-login-title\">快捷登录</div>\n                    <Space direction=\"vertical\" block>\n                        <Button\n                            block\n                            color=\"success\"\n                            size=\"large\"\n                            onClick={() => handleQuickLogin('微信')}\n                        >\n                            微信登录\n                        </Button>\n                        <Button\n                            block\n                            size=\"large\"\n                            onClick={() => handleQuickLogin('手机号')}\n                        >\n                            手机号登录\n                        </Button>\n                    </Space>\n                </Card>\n\n                {/* 注册链接 */}\n                <div className=\"register-link\">\n                    <span>还没有账户？</span>\n                    <Button\n                        fill=\"none\"\n                        color=\"primary\"\n                        onClick={handleRegister}\n                    >\n                        立即注册\n                    </Button>\n                </div>\n\n                {/* 底部信息 */}\n                <div className=\"login-footer\">\n                    <p>登录即表示同意用户协议和隐私政策</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Auth/Login.tsx"
    },
    "2": {
      "path": "/register",
      "layout": false,
      "file": "@/pages/Auth/Register.tsx",
      "id": "2",
      "absPath": "/register",
      "__content": "import { useAuthStore } from '@/stores/auth/useAuthStore'\nimport { Button, Form, Input, NavBar, Toast } from 'antd-mobile'\nimport { EyeInvisibleOutline, EyeOutline } from 'antd-mobile-icons'\nimport React, { useState } from 'react'\nimport { history } from 'umi'\nimport './Auth.css'\n\ninterface RegisterForm {\n    username: string\n    email: string\n    password: string\n    confirmPassword: string\n    phone?: string\n}\n\nconst Register: React.FC = () => {\n    const [form] = Form.useForm<RegisterForm>()\n    const [loading, setLoading] = useState(false)\n    const [showPassword, setShowPassword] = useState(false)\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n    const { register } = useAuthStore()\n\n    const handleSubmit = async (values: RegisterForm) => {\n        try {\n            setLoading(true)\n\n            // 验证密码一致性\n            if (values.password !== values.confirmPassword) {\n                Toast.show({\n                    content: '两次输入的密码不一致',\n                    position: 'top',\n                })\n                return\n            }\n\n            // 调用注册接口\n            await register({\n                username: values.username,\n                email: values.email,\n                password: values.password,\n                phone: values.phone,\n            })\n\n            Toast.show({\n                content: '注册成功！',\n                position: 'top',\n            })\n\n            // 注册成功后跳转到登录页\n            setTimeout(() => {\n                history.push('/login')\n            }, 1000)\n        } catch (error) {\n            console.error('Registration failed:', error)\n            Toast.show({\n                content: '注册失败，请重试',\n                position: 'top',\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const goToLogin = () => {\n        history.push('/login')\n    }\n\n    return (\n        <div className=\"auth-container\">\n            <NavBar onBack={() => history.back()}>注册</NavBar>\n\n            <div className=\"auth-content\">\n                <div className=\"auth-header\">\n                    <h1 className=\"auth-title\">创建账户</h1>\n                    <p className=\"auth-subtitle\">请填写以下信息完成注册</p>\n                </div>\n\n                <Form\n                    form={form}\n                    onFinish={handleSubmit}\n                    layout=\"vertical\"\n                    className=\"auth-form\"\n                >\n                    <Form.Item\n                        name=\"username\"\n                        label=\"用户名\"\n                        rules={[\n                            { required: true, message: '请输入用户名' },\n                            { min: 3, message: '用户名至少3个字符' },\n                            { max: 20, message: '用户名最多20个字符' },\n                            { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名只能包含字母、数字和下划线' },\n                        ]}\n                    >\n                        <Input placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"email\"\n                        label=\"邮箱\"\n                        rules={[\n                            { required: true, message: '请输入邮箱' },\n                            { type: 'email', message: '请输入有效的邮箱地址' },\n                        ]}\n                    >\n                        <Input placeholder=\"请输入邮箱地址\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"phone\"\n                        label=\"手机号（可选）\"\n                        rules={[\n                            { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号' },\n                        ]}\n                    >\n                        <Input placeholder=\"请输入手机号\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        label=\"密码\"\n                        rules={[\n                            { required: true, message: '请输入密码' },\n                            { min: 6, message: '密码至少6个字符' },\n                            { max: 20, message: '密码最多20个字符' },\n                        ]}\n                    >\n                        <Input\n                            placeholder=\"请输入密码\"\n                            type={showPassword ? 'text' : 'password'}\n                            suffix={\n                                <div\n                                    className=\"password-toggle\"\n                                    onClick={() => setShowPassword(!showPassword)}\n                                >\n                                    {showPassword ? <EyeOutline /> : <EyeInvisibleOutline />}\n                                </div>\n                            }\n                        />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"confirmPassword\"\n                        label=\"确认密码\"\n                        rules={[\n                            { required: true, message: '请确认密码' },\n                            ({ getFieldValue }) => ({\n                                validator(_, value) {\n                                    if (!value || getFieldValue('password') === value) {\n                                        return Promise.resolve()\n                                    }\n                                    return Promise.reject(new Error('两次输入的密码不一致'))\n                                },\n                            }),\n                        ]}\n                    >\n                        <Input\n                            placeholder=\"请再次输入密码\"\n                            type={showConfirmPassword ? 'text' : 'password'}\n                            suffix={\n                                <div\n                                    className=\"password-toggle\"\n                                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                >\n                                    {showConfirmPassword ? <EyeOutline /> : <EyeInvisibleOutline />}\n                                </div>\n                            }\n                        />\n                    </Form.Item>\n\n                    <div className=\"auth-actions\">\n                        <Button\n                            type=\"submit\"\n                            color=\"primary\"\n                            size=\"large\"\n                            loading={loading}\n                            block\n                        >\n                            注册\n                        </Button>\n                    </div>\n                </Form>\n\n                <div className=\"auth-footer\">\n                    <span>已有账户？</span>\n                    <Button\n                        fill=\"none\"\n                        color=\"primary\"\n                        onClick={goToLogin}\n                        className=\"auth-link\"\n                    >\n                        立即登录\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Register\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Auth/Register.tsx"
    },
    "3": {
      "path": "/forgot-password",
      "layout": false,
      "file": "@/pages/Auth/ForgotPassword.tsx",
      "id": "3",
      "absPath": "/forgot-password",
      "__content": "import { apiClient } from '@/api/client'\nimport { Button, Form, Input, NavBar, Space, Steps, Toast } from 'antd-mobile'\nimport React, { useState } from 'react'\nimport { history } from 'umi'\nimport './Auth.css'\n\ninterface ForgotPasswordForm {\n    email: string\n    verificationCode: string\n    newPassword: string\n    confirmPassword: string\n}\n\nconst ForgotPassword: React.FC = () => {\n    const [form] = Form.useForm<ForgotPasswordForm>()\n    const [loading, setLoading] = useState(false)\n    const [currentStep, setCurrentStep] = useState(0)\n    const [countdown, setCountdown] = useState(0)\n    const [email, setEmail] = useState('')\n\n    // 发送验证码\n    const sendVerificationCode = async () => {\n        try {\n            const emailValue = form.getFieldValue('email')\n            if (!emailValue) {\n                Toast.show({ content: '请先输入邮箱地址', position: 'top' })\n                return\n            }\n\n            setLoading(true)\n            await apiClient.post('/auth/send-reset-code', { email: emailValue })\n\n            setEmail(emailValue)\n            setCountdown(60)\n            const timer = setInterval(() => {\n                setCountdown((prev) => {\n                    if (prev <= 1) {\n                        clearInterval(timer)\n                        return 0\n                    }\n                    return prev - 1\n                })\n            }, 1000)\n\n            Toast.show({ content: '验证码已发送到您的邮箱', position: 'top' })\n            setCurrentStep(1)\n        } catch (error) {\n            console.error('Send verification code failed:', error)\n            Toast.show({ content: '发送验证码失败，请重试', position: 'top' })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    // 验证验证码\n    const verifyCode = async () => {\n        try {\n            const values = form.getFieldsValue(['verificationCode'])\n            if (!values.verificationCode) {\n                Toast.show({ content: '请输入验证码', position: 'top' })\n                return\n            }\n\n            setLoading(true)\n            await apiClient.post('/auth/verify-reset-code', {\n                email,\n                code: values.verificationCode,\n            })\n\n            Toast.show({ content: '验证码验证成功', position: 'top' })\n            setCurrentStep(2)\n        } catch (error) {\n            console.error('Verify code failed:', error)\n            Toast.show({ content: '验证码错误，请重试', position: 'top' })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    // 重置密码\n    const resetPassword = async () => {\n        try {\n            const values = form.getFieldsValue(['newPassword', 'confirmPassword'])\n\n            if (values.newPassword !== values.confirmPassword) {\n                Toast.show({ content: '两次输入的密码不一致', position: 'top' })\n                return\n            }\n\n            setLoading(true)\n            await apiClient.post('/auth/reset-password', {\n                email,\n                code: form.getFieldValue('verificationCode'),\n                newPassword: values.newPassword,\n            })\n\n            Toast.show({ content: '密码重置成功！', position: 'top' })\n\n            setTimeout(() => {\n                history.push('/login')\n            }, 1000)\n        } catch (error) {\n            console.error('Reset password failed:', error)\n            Toast.show({ content: '密码重置失败，请重试', position: 'top' })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const handleNext = () => {\n        if (currentStep === 0) {\n            sendVerificationCode()\n        } else if (currentStep === 1) {\n            verifyCode()\n        } else if (currentStep === 2) {\n            resetPassword()\n        }\n    }\n\n    const steps = [\n        { title: '验证邮箱', description: '输入您的邮箱地址' },\n        { title: '输入验证码', description: '请查收邮箱验证码' },\n        { title: '重置密码', description: '设置新密码' },\n    ]\n\n    return (\n        <div className=\"auth-container\">\n            <NavBar onBack={() => history.back()}>忘记密码</NavBar>\n\n            <div className=\"auth-content\">\n                <div className=\"auth-header\">\n                    <h1 className=\"auth-title\">重置密码</h1>\n                    <p className=\"auth-subtitle\">通过邮箱验证来重置您的密码</p>\n                </div>\n\n                <div className=\"forgot-password-steps\">\n                    <Steps current={currentStep} direction=\"horizontal\">\n                        {steps.map((step, index) => (\n                            <Steps.Step\n                                key={index}\n                                title={step.title}\n                                description={step.description}\n                            />\n                        ))}\n                    </Steps>\n                </div>\n\n                <Form form={form} layout=\"vertical\" className=\"auth-form\">\n                    {currentStep === 0 && (\n                        <Form.Item\n                            name=\"email\"\n                            label=\"邮箱地址\"\n                            rules={[\n                                { required: true, message: '请输入邮箱地址' },\n                                { type: 'email', message: '请输入有效的邮箱地址' },\n                            ]}\n                        >\n                            <Input placeholder=\"请输入您的邮箱地址\" />\n                        </Form.Item>\n                    )}\n\n                    {currentStep === 1 && (\n                        <Space direction=\"vertical\" style={{ width: '100%' }}>\n                            <div className=\"verification-info\">\n                                <p>验证码已发送到：{email}</p>\n                                {countdown > 0 && <p className=\"countdown\">重新发送 ({countdown}s)</p>}\n                            </div>\n                            <Form.Item\n                                name=\"verificationCode\"\n                                label=\"验证码\"\n                                rules={[\n                                    { required: true, message: '请输入验证码' },\n                                    { len: 6, message: '验证码为6位数字' },\n                                ]}\n                            >\n                                <Input placeholder=\"请输入6位验证码\" maxLength={6} />\n                            </Form.Item>\n                            {countdown === 0 && (\n                                <Button\n                                    fill=\"none\"\n                                    color=\"primary\"\n                                    onClick={sendVerificationCode}\n                                    loading={loading}\n                                >\n                                    重新发送验证码\n                                </Button>\n                            )}\n                        </Space>\n                    )}\n\n                    {currentStep === 2 && (\n                        <Space direction=\"vertical\" style={{ width: '100%' }}>\n                            <Form.Item\n                                name=\"newPassword\"\n                                label=\"新密码\"\n                                rules={[\n                                    { required: true, message: '请输入新密码' },\n                                    { min: 6, message: '密码至少6个字符' },\n                                    { max: 20, message: '密码最多20个字符' },\n                                ]}\n                            >\n                                <Input placeholder=\"请输入新密码\" type=\"password\" />\n                            </Form.Item>\n\n                            <Form.Item\n                                name=\"confirmPassword\"\n                                label=\"确认新密码\"\n                                rules={[\n                                    { required: true, message: '请确认新密码' },\n                                    ({ getFieldValue }) => ({\n                                        validator(_, value) {\n                                            if (!value || getFieldValue('newPassword') === value) {\n                                                return Promise.resolve()\n                                            }\n                                            return Promise.reject(new Error('两次输入的密码不一致'))\n                                        },\n                                    }),\n                                ]}\n                            >\n                                <Input placeholder=\"请再次输入新密码\" type=\"password\" />\n                            </Form.Item>\n                        </Space>\n                    )}\n\n                    <div className=\"auth-actions\">\n                        <Button\n                            color=\"primary\"\n                            size=\"large\"\n                            loading={loading}\n                            onClick={handleNext}\n                            block\n                        >\n                            {currentStep === 0 && '发送验证码'}\n                            {currentStep === 1 && '验证'}\n                            {currentStep === 2 && '重置密码'}\n                        </Button>\n                    </div>\n                </Form>\n\n                <div className=\"auth-footer\">\n                    <Button\n                        fill=\"none\"\n                        color=\"primary\"\n                        onClick={() => history.push('/login')}\n                        className=\"auth-link\"\n                    >\n                        返回登录\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ForgotPassword\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Auth/ForgotPassword.tsx"
    },
    "4": {
      "path": "/",
      "file": "@/components/Layout/Layout.tsx",
      "id": "4",
      "absPath": "/",
      "__content": "import { tabBarConfig } from '@/config/env'\nimport { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport { useUIStore } from '@/stores/ui/useUIStore'\nimport { Mask, SpinLoading, TabBar } from 'antd-mobile'\nimport { useEffect } from 'react'\nimport { history, Outlet, useLocation } from 'umi'\nimport Header from './Header'\nimport './Layout.css'\n\nexport default function Layout() {\n  const location = useLocation()\n  const { isMobile, isTablet, deviceType } = useDeviceInfo()\n  const { globalLoading, loadingText } = useUIStore()\n\n  // 从配置中获取 Tab 配置 - 已直接导入\n\n  useEffect(() => {\n    // 根据设备类型添加相应的类名\n    document.body.className = `device-${deviceType} ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`\n\n    // 移动端优化\n    if (isMobile) {\n      // 禁用双击缩放\n      document.addEventListener('touchstart', function (event) {\n        if (event.touches.length > 1) {\n          event.preventDefault()\n        }\n      }, { passive: false })\n\n      let lastTouchEnd = 0\n      document.addEventListener('touchend', function (event) {\n        const now = (new Date()).getTime()\n        if (now - lastTouchEnd <= 300) {\n          event.preventDefault()\n        }\n        lastTouchEnd = now\n      }, { passive: false })\n    }\n  }, [isMobile, isTablet, deviceType])\n\n  const handleTabChange = (key: string) => {\n    history.push(key)\n  }\n\n  return (\n    <div className={`layout ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n      {/* 头部 */}\n      <Header />\n\n      {/* 主内容区域 */}\n      <main className=\"layout-content\">\n        <div className=\"responsive-container\">\n          <Outlet />\n        </div>\n      </main>\n\n      {/* 底部导航栏 */}\n      <div className=\"layout-tabbar\">\n        <TabBar\n          activeKey={location.pathname}\n          onChange={handleTabChange}\n          className=\"custom-tabbar\"\n          style={tabBarConfig.style}\n        >\n          {tabBarConfig.tabs.map(item => {\n            const IconComponent = location.pathname === item.key ? item.activeIcon : item.icon\n            return (\n              <TabBar.Item\n                key={item.key}\n                icon={IconComponent ? <IconComponent /> : null}\n                title={item.title}\n                badge={item.badge}\n              />\n            )\n          })}\n        </TabBar>\n      </div>\n\n      {/* 全局加载遮罩 */}\n      <Mask visible={globalLoading} opacity={0.5}>\n        <div style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center',\n          color: '#ffffff'\n        }}>\n          <SpinLoading color=\"#ffffff\" style={{ fontSize: 48 }} />\n          <div style={{ marginTop: 12, fontSize: 16 }}>{loadingText}</div>\n        </div>\n      </Mask>\n    </div>\n  )\n}",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/components/Layout/Layout.tsx"
    },
    "5": {
      "path": "/",
      "file": "@/pages/Home/Home.tsx",
      "parentId": "4",
      "id": "5",
      "absPath": "/",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport nativeBridge from '@/utils/nativeBridge'\nimport { Button, Card, Grid, Space } from 'antd-mobile'\nimport { useEffect, useState } from 'react'\nimport './Home.css'\n\ninterface EnvironmentInfo {\n  platform: string\n  isNative: boolean\n  version: string\n  model: string\n  appVersion: string\n}\n\nexport default function Home() {\n  const { isMobile, isTablet, deviceType } = useDeviceInfo()\n  const [envInfo, setEnvInfo] = useState<EnvironmentInfo | null>(null)\n\n  useEffect(() => {\n    // 获取环境信息\n    const getEnvironmentInfo = async () => {\n      try {\n        const deviceInfo = await nativeBridge.getDeviceInfo()\n        setEnvInfo({\n          platform: deviceInfo.platform,\n          isNative: nativeBridge.isNative,\n          version: deviceInfo.version,\n          model: deviceInfo.model,\n          appVersion: deviceInfo.appVersion\n        })\n      } catch (error) {\n        console.error('Failed to get device info:', error)\n        setEnvInfo({\n          platform: 'web',\n          isNative: false,\n          version: 'unknown',\n          model: 'browser',\n          appVersion: '1.0.0'\n        })\n      }\n    }\n\n    getEnvironmentInfo()\n  }, [])\n\n  const handleTestNativeFeature = async (feature: string) => {\n    switch (feature) {\n      case 'toast':\n        nativeBridge.showToast(`这是来自${envInfo?.platform || 'web'}的Toast消息`)\n        break\n      case 'alert':\n        await nativeBridge.showAlert('原生弹窗', '这是通过原生Bridge调用的弹窗')\n        break\n      case 'confirm':\n        const result = await nativeBridge.showConfirm('确认操作', '你确定要执行这个操作吗？')\n        nativeBridge.showToast(result ? '用户确认' : '用户取消')\n        break\n      case 'storage':\n        await nativeBridge.setStorage('test_key', { message: 'Hello from H5', timestamp: Date.now() })\n        const stored = await nativeBridge.getStorage('test_key')\n        nativeBridge.showToast(`存储测试: ${stored?.message}`)\n        break\n      case 'network':\n        try {\n          const networkStatus = await nativeBridge.getNetworkStatus()\n          nativeBridge.showToast(`网络状态: ${networkStatus.isConnected ? '已连接' : '未连接'} (${networkStatus.connectionType})`)\n        } catch (error) {\n          nativeBridge.showToast('网络状态检测失败')\n        }\n        break\n      default:\n        nativeBridge.showToast(`测试功能: ${feature}`)\n    }\n  }\n\n  return (\n    <div className={`home ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n      <div className=\"responsive-container\">\n        {/* 欢迎卡片 */}\n        <Card className=\"welcome-card\">\n          <div className=\"welcome-content\">\n            <h2>欢迎使用工作台</h2>\n            <p>这是一个现代化的移动端应用，支持原生容器和Web环境</p>\n          </div>\n        </Card>\n\n        {/* 环境信息卡片 */}\n        <Card title=\"运行环境\" className=\"env-card\">\n          <div className=\"env-info\">\n            {envInfo ? (\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <div className=\"env-item\">\n                  <span className=\"label\">平台:</span>\n                  <span className={`value platform-${envInfo.platform}`}>\n                    {envInfo.platform.toUpperCase()}\n                    {envInfo.isNative && <span className=\"native-badge\">原生容器</span>}\n                  </span>\n                </div>\n                <div className=\"env-item\">\n                  <span className=\"label\">设备类型:</span>\n                  <span className=\"value\">{deviceType}</span>\n                </div>\n                <div className=\"env-item\">\n                  <span className=\"label\">系统版本:</span>\n                  <span className=\"value\">{envInfo.version}</span>\n                </div>\n                <div className=\"env-item\">\n                  <span className=\"label\">设备型号:</span>\n                  <span className=\"value\">{envInfo.model}</span>\n                </div>\n                <div className=\"env-item\">\n                  <span className=\"label\">应用版本:</span>\n                  <span className=\"value\">{envInfo.appVersion}</span>\n                </div>\n              </Space>\n            ) : (\n              <div className=\"loading\">正在获取环境信息...</div>\n            )}\n          </div>\n        </Card>\n\n        {/* 调试工具卡片 */}\n        <Card title=\"调试工具\" className=\"debug-card\">\n          <Grid columns={2} gap={12}>\n            <Grid.Item>\n              <Button\n                block\n                color=\"success\"\n                onClick={() => {\n                  if ((window as any).vConsole) {\n                    console.log('vConsole 已可用!')\n                    console.log('当前时间:', new Date().toLocaleString())\n                    console.log('页面信息:', {\n                      url: window.location.href,\n                      userAgent: navigator.userAgent,\n                      viewport: {\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                      }\n                    })\n                  } else {\n                    console.log('vConsole 不可用')\n                  }\n                }}\n              >\n                测试 vConsole\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => {\n                  console.log('这是一条测试日志')\n                  console.warn('这是一条警告日志')\n                  console.error('这是一条错误日志')\n                  console.info('这是一条信息日志')\n                }}\n              >\n                生成测试日志\n              </Button>\n            </Grid.Item>\n          </Grid>\n        </Card>\n\n        {/* 功能测试卡片 */}\n        <Card title=\"原生功能测试\" className=\"test-card\">\n          <Grid columns={2} gap={12}>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => handleTestNativeFeature('toast')}\n              >\n                Toast 消息\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => handleTestNativeFeature('alert')}\n              >\n                Alert 弹窗\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => handleTestNativeFeature('confirm')}\n              >\n                Confirm 确认\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => handleTestNativeFeature('storage')}\n              >\n                存储测试\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                onClick={() => handleTestNativeFeature('network')}\n              >\n                网络状态\n              </Button>\n            </Grid.Item>\n            <Grid.Item>\n              <Button\n                block\n                color=\"primary\"\n                disabled={!envInfo?.isNative}\n                onClick={() => handleTestNativeFeature('camera')}\n              >\n                相机功能\n              </Button>\n            </Grid.Item>\n          </Grid>\n        </Card>\n\n        {/* 快捷入口 */}\n        <Card title=\"快捷入口\" className=\"shortcuts-card\">\n          <Grid columns={3} gap={16}>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">📊</div>\n                <div className=\"shortcut-title\">数据看板</div>\n              </div>\n            </Grid.Item>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">📋</div>\n                <div className=\"shortcut-title\">任务管理</div>\n              </div>\n            </Grid.Item>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">👥</div>\n                <div className=\"shortcut-title\">团队协作</div>\n              </div>\n            </Grid.Item>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">📈</div>\n                <div className=\"shortcut-title\">业绩统计</div>\n              </div>\n            </Grid.Item>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">⚙️</div>\n                <div className=\"shortcut-title\">系统设置</div>\n              </div>\n            </Grid.Item>\n            <Grid.Item>\n              <div className=\"shortcut-item\">\n                <div className=\"shortcut-icon\">❓</div>\n                <div className=\"shortcut-title\">帮助中心</div>\n              </div>\n            </Grid.Item>\n          </Grid>\n        </Card>\n      </div>\n    </div>\n  )\n}",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Home/Home.tsx"
    },
    "6": {
      "path": "/network-test",
      "file": "@/pages/NetworkTest.tsx",
      "parentId": "4",
      "id": "6",
      "absPath": "/network-test",
      "__content": "import NetworkStatusMonitor from '@/components/NetworkStatusMonitor';\nimport '@/styles/antd-mobile.css';\nimport { nativeBridge } from '@/utils/nativeBridge';\nimport { networkManager } from '@/utils/networkManager';\nimport { networkTester, type NetworkTestResult } from '@/utils/networkTester';\nimport {\n    Badge,\n    Button,\n    Card,\n    Collapse,\n    Dialog,\n    Empty,\n    List,\n    NavBar,\n    NoticeBar,\n    Popup,\n    Space,\n    SpinLoading,\n    SwipeAction,\n    SwiperRef,\n    Tabs,\n    Tag,\n    Toast\n} from 'antd-mobile';\nimport {\n    CheckCircleOutline,\n    ClockCircleOutline,\n    CloseCircleOutline,\n    DeleteOutline,\n    DownlandOutline,\n    ExclamationCircleOutline,\n    FileOutline,\n    RedoOutline,\n    RightOutline,\n    SetOutline,\n    StarOutline,\n    UploadOutline\n} from 'antd-mobile-icons';\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst NetworkTest: React.FC = () => {\n    const [testResult, setTestResult] = useState<NetworkTestResult | null>(null);\n    const [isRunning, setIsRunning] = useState(false);\n    const [testHistory, setTestHistory] = useState<NetworkTestResult[]>([]);\n    const [cacheStats, setCacheStats] = useState<{ size: number; keys: string[] }>({ size: 0, keys: [] });\n    const [showReport, setShowReport] = useState(false);\n    const [activeTab, setActiveTab] = useState('status');\n    const [showQuickActions, setShowQuickActions] = useState(false);\n    const swiperRef = useRef<SwiperRef>(null);\n\n    useEffect(() => {\n        // 加载测试历史\n        setTestHistory(networkTester.getTestHistory());\n\n        // 更新缓存统计\n        updateCacheStats();\n\n        // 定期更新缓存统计\n        const interval = setInterval(updateCacheStats, 5000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const updateCacheStats = () => {\n        setCacheStats(networkManager.getCacheStats());\n    };\n\n    const runNetworkTest = async () => {\n        if (isRunning) return;\n\n        setIsRunning(true);\n        Toast.show({\n            icon: <SpinLoading />,\n            content: '网络测试中...',\n            duration: 0\n        });\n\n        try {\n            const result = await networkTester.runFullTest();\n            setTestResult(result);\n            setTestHistory(networkTester.getTestHistory());\n\n            Toast.show({\n                icon: result.nativeBridgeWorking ? <CheckCircleOutline /> : <CloseCircleOutline />,\n                content: result.nativeBridgeWorking ? '测试完成' : '测试失败',\n            });\n        } catch (error) {\n            console.error('网络测试失败:', error);\n            Toast.show({\n                icon: <CloseCircleOutline />,\n                content: '测试失败',\n            });\n        } finally {\n            setIsRunning(false);\n        }\n    };\n\n    const testOfflineFunctionality = async () => {\n        Toast.show({\n            icon: <SpinLoading />,\n            content: '测试离线功能...',\n        });\n\n        try {\n            const success = await networkTester.testOfflineFunctionality();\n            if (success) {\n                Toast.show({\n                    icon: <CheckCircleOutline />,\n                    content: '离线功能测试成功！',\n                });\n            } else {\n                Toast.show({\n                    icon: <CloseCircleOutline />,\n                    content: '离线功能测试失败！',\n                });\n            }\n            updateCacheStats();\n        } catch (error) {\n            Toast.show({\n                icon: <CloseCircleOutline />,\n                content: `离线功能测试失败: ${error}`,\n            });\n        }\n    };\n\n    const simulateWeakNetwork = async () => {\n        Toast.show({\n            icon: <SpinLoading />,\n            content: '模拟弱网环境...',\n        });\n\n        try {\n            await networkTester.simulateWeakNetwork();\n            Toast.show({\n                icon: <CheckCircleOutline />,\n                content: '弱网环境模拟完成！',\n            });\n        } catch (error) {\n            Toast.show({\n                icon: <CloseCircleOutline />,\n                content: `弱网环境模拟失败: ${error}`,\n            });\n        }\n    };\n\n    const clearCache = async () => {\n        const result = await Dialog.confirm({\n            content: '确定要清除所有缓存吗？',\n            confirmText: '清除',\n            cancelText: '取消',\n        });\n\n        if (result) {\n            Toast.show({\n                icon: <SpinLoading />,\n                content: '清除缓存中...',\n            });\n\n            try {\n                await networkManager.clearCache();\n                updateCacheStats();\n                Toast.show({\n                    icon: <CheckCircleOutline />,\n                    content: '缓存已清除！',\n                });\n            } catch (error) {\n                Toast.show({\n                    icon: <CloseCircleOutline />,\n                    content: `清除缓存失败: ${error}`,\n                });\n            }\n        }\n    };\n\n    const clearTestHistory = () => {\n        Dialog.confirm({\n            content: '确定要清除测试历史吗？',\n            confirmText: '清除',\n            cancelText: '取消',\n        }).then((result) => {\n            if (result) {\n                networkTester.clearTestHistory();\n                setTestHistory([]);\n                setTestResult(null);\n                Toast.show({\n                    icon: <CheckCircleOutline />,\n                    content: '测试历史已清除！',\n                });\n            }\n        });\n    };\n\n    const generateReport = () => {\n        const report = networkTester.generateTestReport();\n        console.log('网络测试报告:', report);\n\n        // 复制到剪贴板\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(report).then(() => {\n                Toast.show({\n                    icon: <CheckCircleOutline />,\n                    content: '测试报告已复制到剪贴板！',\n                });\n            });\n        } else {\n            setShowReport(true);\n        }\n    };\n\n    const testNativeBridge = async () => {\n        Toast.show({\n            icon: <SpinLoading />,\n            content: '测试原生桥接...',\n        });\n\n        try {\n            // 测试设备信息\n            const deviceInfo = await nativeBridge.getDeviceInfo();\n            console.log('设备信息:', deviceInfo);\n\n            // 测试网络状态\n            const networkInfo = await nativeBridge.getNetworkStatus();\n            console.log('网络状态:', networkInfo);\n\n            // 测试Toast\n            await nativeBridge.showToast('原生桥接测试成功！', 'short');\n\n            Toast.show({\n                icon: <CheckCircleOutline />,\n                content: '原生桥接功能测试完成！',\n            });\n        } catch (error) {\n            Toast.show({\n                icon: <CloseCircleOutline />,\n                content: `原生桥接测试失败: ${error}`,\n            });\n        }\n    };\n\n    const getStatusIcon = (isOnline: boolean, quality: string) => {\n        if (!isOnline) {\n            return <CloseCircleOutline className=\"text-red-500\" />;\n        }\n\n        switch (quality) {\n            case 'excellent':\n                return <CheckCircleOutline className=\"text-green-500\" />;\n            case 'good':\n                return <CheckCircleOutline className=\"text-blue-500\" />;\n            case 'poor':\n                return <ExclamationCircleOutline className=\"text-yellow-500\" />;\n            default:\n                return <CloseCircleOutline className=\"text-red-500\" />;\n        }\n    };\n\n    const getStatusColor = (isOnline: boolean, quality: string) => {\n        if (!isOnline) return 'danger';\n\n        switch (quality) {\n            case 'excellent': return 'success';\n            case 'good': return 'primary';\n            case 'poor': return 'warning';\n            default: return 'danger';\n        }\n    };\n\n    const getStatusText = (isOnline: boolean, quality: string) => {\n        if (!isOnline) return '离线';\n\n        switch (quality) {\n            case 'excellent': return '网络良好';\n            case 'good': return '网络正常';\n            case 'poor': return '网络较差';\n            default: return '无网络';\n        }\n    };\n\n    const renderNetworkStatus = () => (\n        <div className=\"space-y-4\">\n            {/* 网络状态概览 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-lg font-semibold\">网络状态概览</span>\n                        <NetworkStatusMonitor showDetails={false} />\n                    </div>\n\n                    {testResult && (\n                        <div className=\"space-y-4\">\n                            {/* 主要指标 */}\n                            <div className=\"grid grid-cols-2 gap-3\">\n                                <div className=\"text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg\">\n                                    <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                                        {testResult.isOnline ? '在线' : '离线'}\n                                    </div>\n                                    <div className=\"text-sm text-blue-600\">连接状态</div>\n                                </div>\n\n                                <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-lg\">\n                                    <div className=\"text-2xl font-bold text-green-600 mb-1\">\n                                        {testResult.signalStrength}%\n                                    </div>\n                                    <div className=\"text-sm text-green-600\">信号强度</div>\n                                </div>\n                            </div>\n\n                            {/* 网络质量进度条 */}\n                            <div className=\"space-y-2\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                    <span>网络质量</span>\n                                    <span className=\"font-medium\">{testResult.networkQuality}</span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                    <div\n                                        className={`h-2 rounded-full transition-all duration-300 ${testResult.isOnline ?\n                                            (testResult.networkQuality === 'excellent' ? 'bg-green-500' :\n                                                testResult.networkQuality === 'good' ? 'bg-blue-500' : 'bg-yellow-500') : 'bg-red-500'\n                                            }`}\n                                        style={{ width: `${testResult.signalStrength}%` }}\n                                    />\n                                </div>\n                            </div>\n\n                            {/* 性能指标 */}\n                            {testResult.pingTime && (\n                                <div className=\"grid grid-cols-3 gap-2\">\n                                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                                        <div className=\"flex items-center justify-center mb-1\">\n                                            <ClockCircleOutline className=\"text-blue-500 mr-1\" />\n                                            <span className=\"text-sm font-semibold text-blue-600\">\n                                                {testResult.pingTime}ms\n                                            </span>\n                                        </div>\n                                        <div className=\"text-xs text-blue-600\">Ping</div>\n                                    </div>\n\n                                    {testResult.downloadSpeed && (\n                                        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                                            <div className=\"flex items-center justify-center mb-1\">\n                                                <DownlandOutline className=\"text-green-500 mr-1\" />\n                                                <span className=\"text-sm font-semibold text-green-600\">\n                                                    {testResult.downloadSpeed}KB/s\n                                                </span>\n                                            </div>\n                                            <div className=\"text-xs text-green-600\">下载</div>\n                                        </div>\n                                    )}\n\n                                    {testResult.uploadSpeed && (\n                                        <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                                            <div className=\"flex items-center justify-center mb-1\">\n                                                <UploadOutline className=\"text-purple-500 mr-1\" />\n                                                <span className=\"text-sm font-semibold text-purple-600\">\n                                                    {testResult.uploadSpeed}KB/s\n                                                </span>\n                                            </div>\n                                            <div className=\"text-xs text-purple-600\">上传</div>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {/* 原生桥接状态 */}\n                            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                                <div className=\"flex items-center\">\n                                    <SetOutline className=\"text-gray-500 mr-2\" />\n                                    <span className=\"text-sm\">原生桥接</span>\n                                </div>\n                                <Tag color={testResult.nativeBridgeWorking ? 'success' : 'danger'}>\n                                    {testResult.nativeBridgeWorking ? '正常' : '异常'}\n                                </Tag>\n                            </div>\n\n                            {/* 错误信息 */}\n                            {testResult.errors.length > 0 && (\n                                <div className=\"p-3 bg-red-50 rounded-lg\">\n                                    <div className=\"flex items-center mb-2\">\n                                        <ExclamationCircleOutline className=\"text-red-500 mr-2\" />\n                                        <span className=\"text-sm font-semibold text-red-800\">错误信息</span>\n                                    </div>\n                                    <div className=\"text-xs text-red-700 space-y-1\">\n                                        {testResult.errors.map((error, index) => (\n                                            <div key={index}>• {error}</div>\n                                        ))}\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </Card>\n\n            {/* 快速操作 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-lg font-semibold\">快速操作</span>\n                        <Button\n                            size=\"small\"\n                            fill=\"outline\"\n                            onClick={() => setShowQuickActions(!showQuickActions)}\n                        >\n                            {showQuickActions ? '收起' : '展开'}\n                        </Button>\n                    </div>\n\n                    {showQuickActions && (\n                        <div className=\"space-y-3\">\n                            <Button\n                                block\n                                color=\"primary\"\n                                loading={isRunning}\n                                onClick={runNetworkTest}\n                                disabled={isRunning}\n                            >\n                                <RedoOutline className=\"mr-2\" />\n                                {isRunning ? '测试中...' : '一键网络测试'}\n                            </Button>\n\n                            <div className=\"grid grid-cols-2 gap-2\">\n                                <Button\n                                    color=\"success\"\n                                    onClick={testNativeBridge}\n                                >\n                                    <SetOutline className=\"mr-2\" />\n                                    桥接测试\n                                </Button>\n                                <Button\n                                    color=\"warning\"\n                                    onClick={testOfflineFunctionality}\n                                >\n                                    <FileOutline className=\"mr-2\" />\n                                    离线测试\n                                </Button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n\n    const renderTestControls = () => (\n        <div className=\"space-y-4\">\n            {/* 主要测试功能 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"mb-4\">\n                        <span className=\"text-lg font-semibold\">主要测试功能</span>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                        <Button\n                            block\n                            color=\"primary\"\n                            loading={isRunning}\n                            onClick={runNetworkTest}\n                            disabled={isRunning}\n                        >\n                            <RedoOutline className=\"mr-2\" />\n                            {isRunning ? '测试中...' : '运行完整网络测试'}\n                        </Button>\n\n                        <div className=\"grid grid-cols-2 gap-3\">\n                            <Button\n                                color=\"success\"\n                                onClick={testNativeBridge}\n                            >\n                                <SetOutline className=\"mr-2\" />\n                                测试原生桥接\n                            </Button>\n\n                            <Button\n                                color=\"warning\"\n                                onClick={testOfflineFunctionality}\n                            >\n                                <FileOutline className=\"mr-2\" />\n                                测试离线功能\n                            </Button>\n                        </div>\n\n                        <Button\n                            block\n                            color=\"default\"\n                            onClick={simulateWeakNetwork}\n                        >\n                            <ExclamationCircleOutline className=\"mr-2\" />\n                            模拟弱网环境\n                        </Button>\n                    </div>\n                </div>\n            </Card>\n\n            {/* 高级功能 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"mb-4\">\n                        <span className=\"text-lg font-semibold\">高级功能</span>\n                    </div>\n\n                    <Collapse>\n                        <Collapse.Panel key=\"1\" title=\"网络诊断工具\">\n                            <div className=\"space-y-3\">\n                                <Button\n                                    size=\"small\"\n                                    fill=\"outline\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        Toast.show({ content: 'Ping测试功能开发中' });\n                                    }}\n                                >\n                                    Ping测试\n                                </Button>\n                                <Button\n                                    size=\"small\"\n                                    fill=\"outline\"\n                                    color=\"success\"\n                                    onClick={() => {\n                                        Toast.show({ content: 'DNS测试功能开发中' });\n                                    }}\n                                >\n                                    DNS测试\n                                </Button>\n                                <Button\n                                    size=\"small\"\n                                    fill=\"outline\"\n                                    color=\"warning\"\n                                    onClick={() => {\n                                        Toast.show({ content: '路由追踪功能开发中' });\n                                    }}\n                                >\n                                    路由追踪\n                                </Button>\n                            </div>\n                        </Collapse.Panel>\n\n                        <Collapse.Panel key=\"2\" title=\"性能监控\">\n                            <div className=\"space-y-3\">\n                                <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-sm\">CPU使用率</span>\n                                    <div className=\"w-20 bg-gray-200 rounded-full h-1\">\n                                        <div className=\"bg-blue-500 h-1 rounded-full\" style={{ width: '45%' }} />\n                                    </div>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-sm\">内存使用率</span>\n                                    <div className=\"w-20 bg-gray-200 rounded-full h-1\">\n                                        <div className=\"bg-green-500 h-1 rounded-full\" style={{ width: '62%' }} />\n                                    </div>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-sm\">电池电量</span>\n                                    <div className=\"w-20 bg-gray-200 rounded-full h-1\">\n                                        <div className=\"bg-yellow-500 h-1 rounded-full\" style={{ width: '78%' }} />\n                                    </div>\n                                </div>\n                            </div>\n                        </Collapse.Panel>\n                    </Collapse>\n                </div>\n            </Card>\n        </div>\n    );\n\n    const renderCacheManagement = () => (\n        <div className=\"space-y-4\">\n            {/* 缓存概览 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-lg font-semibold\">缓存概览</span>\n                        <Space>\n                            <Button\n                                size=\"small\"\n                                color=\"danger\"\n                                onClick={clearCache}\n                            >\n                                <DeleteOutline className=\"mr-1\" />\n                                清除缓存\n                            </Button>\n                            <Button\n                                size=\"small\"\n                                color=\"default\"\n                                onClick={updateCacheStats}\n                            >\n                                <RedoOutline className=\"mr-1\" />\n                                刷新\n                            </Button>\n                        </Space>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg\">\n                            <div>\n                                <div className=\"font-medium text-blue-800\">缓存项目</div>\n                                <div className=\"text-sm text-blue-600\">{cacheStats.size} 个</div>\n                            </div>\n                            <Badge content={cacheStats.size} color=\"blue\" />\n                        </div>\n\n                        {cacheStats.keys.length > 0 && (\n                            <div className=\"p-4 bg-gray-50 rounded-lg\">\n                                <div className=\"text-sm font-medium mb-2\">缓存键</div>\n                                <div className=\"text-xs text-gray-600 space-y-1\">\n                                    {cacheStats.keys.slice(0, 5).map((key, index) => (\n                                        <div key={index} className=\"flex items-center\">\n                                            <StarOutline className=\"text-yellow-500 mr-1\" />\n                                            {key}\n                                        </div>\n                                    ))}\n                                    {cacheStats.keys.length > 5 && (\n                                        <div className=\"text-gray-500\">... 还有 {cacheStats.keys.length - 5} 个</div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n\n                        {/* 缓存使用情况 */}\n                        <div className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between text-sm\">\n                                <span>缓存使用率</span>\n                                <span className=\"font-medium\">{Math.round((cacheStats.size / 50) * 100)}%</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div\n                                    className={`h-2 rounded-full transition-all duration-300 ${cacheStats.size > 40 ? 'bg-red-500' : 'bg-blue-500'\n                                        }`}\n                                    style={{ width: `${Math.round((cacheStats.size / 50) * 100)}%` }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n\n            {/* 缓存详情 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"mb-4\">\n                        <span className=\"text-lg font-semibold\">缓存详情</span>\n                    </div>\n\n                    <List>\n                        <List.Item\n                            prefix={<FileOutline />}\n                            extra={<Tag color=\"blue\">API缓存</Tag>}\n                        >\n                            <div>\n                                <div className=\"font-medium\">API响应缓存</div>\n                                <div className=\"text-xs text-gray-500\">存储API请求的响应数据</div>\n                            </div>\n                        </List.Item>\n\n                        <List.Item\n                            prefix={<FileOutline />}\n                            extra={<Tag color=\"green\">静态资源</Tag>}\n                        >\n                            <div>\n                                <div className=\"font-medium\">静态资源缓存</div>\n                                <div className=\"text-xs text-gray-500\">缓存JS、CSS、图片等静态文件</div>\n                            </div>\n                        </List.Item>\n\n                        <List.Item\n                            prefix={<StarOutline />}\n                            extra={<Tag color=\"orange\">用户数据</Tag>}\n                        >\n                            <div>\n                                <div className=\"font-medium\">用户数据缓存</div>\n                                <div className=\"text-xs text-gray-500\">存储用户设置和偏好</div>\n                            </div>\n                        </List.Item>\n                    </List>\n                </div>\n            </Card>\n        </div>\n    );\n\n    const renderTestHistory = () => (\n        <div className=\"space-y-4\">\n            {/* 历史记录概览 */}\n            <Card>\n                <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-lg font-semibold\">测试历史</span>\n                        <Space>\n                            <Button\n                                size=\"small\"\n                                color=\"primary\"\n                                onClick={generateReport}\n                            >\n                                <FileOutline className=\"mr-1\" />\n                                生成报告\n                            </Button>\n                            <Button\n                                size=\"small\"\n                                color=\"danger\"\n                                onClick={clearTestHistory}\n                            >\n                                <DeleteOutline className=\"mr-1\" />\n                                清除历史\n                            </Button>\n                        </Space>\n                    </div>\n\n                    {testHistory.length === 0 ? (\n                        <Empty\n                            description=\"暂无测试历史\"\n                            image={<FileOutline style={{ fontSize: 48, color: '#ccc' }} />}\n                        />\n                    ) : (\n                        <div className=\"space-y-2\">\n                            {/* 统计信息 */}\n                            <div className=\"grid grid-cols-3 gap-2 mb-4\">\n                                <div className=\"text-center p-2 bg-blue-50 rounded\">\n                                    <div className=\"text-lg font-bold text-blue-600\">{testHistory.length}</div>\n                                    <div className=\"text-xs text-blue-600\">总测试</div>\n                                </div>\n                                <div className=\"text-center p-2 bg-green-50 rounded\">\n                                    <div className=\"text-lg font-bold text-green-600\">\n                                        {testHistory.filter(r => r.isOnline).length}\n                                    </div>\n                                    <div className=\"text-xs text-green-600\">成功</div>\n                                </div>\n                                <div className=\"text-center p-2 bg-red-50 rounded\">\n                                    <div className=\"text-lg font-bold text-red-600\">\n                                        {testHistory.filter(r => !r.isOnline).length}\n                                    </div>\n                                    <div className=\"text-xs text-red-600\">失败</div>\n                                </div>\n                            </div>\n\n                            {/* 历史记录列表 */}\n                            <List>\n                                {testHistory.slice(-10).reverse().map((result, index) => (\n                                    <SwipeAction\n                                        key={index}\n                                        rightActions={[\n                                            {\n                                                key: 'delete',\n                                                text: '删除',\n                                                color: 'danger',\n                                                onClick: () => {\n                                                    Toast.show({ content: '删除功能开发中' });\n                                                }\n                                            }\n                                        ]}\n                                    >\n                                        <List.Item\n                                            prefix={getStatusIcon(result.isOnline, result.networkQuality)}\n                                            extra={\n                                                <Tag color={getStatusColor(result.isOnline, result.networkQuality)}>\n                                                    {getStatusText(result.isOnline, result.networkQuality)}\n                                                </Tag>\n                                            }\n                                            arrow={<RightOutline />}\n                                        >\n                                            <div className=\"space-y-1\">\n                                                <div className=\"text-sm font-medium\">\n                                                    {new Date(result.timestamp).toLocaleString()}\n                                                </div>\n                                                <div className=\"text-xs text-gray-600 space-y-1\">\n                                                    <div>信号强度: {result.signalStrength}%</div>\n                                                    <div>网络质量: {result.networkQuality}</div>\n                                                    {result.pingTime && <div>Ping: {result.pingTime}ms</div>}\n                                                </div>\n                                            </div>\n                                        </List.Item>\n                                    </SwipeAction>\n                                ))}\n                            </List>\n                        </div>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n\n    return (\n        <div className=\"min-h-screen bg-gray-50\">\n            <NavBar backArrow={false}>\n                <div className=\"flex items-center\">\n                    <span className=\"text-lg font-semibold\">网络测试工具</span>\n                    <Badge content=\"v1.0\" color=\"blue\" style={{ marginLeft: 8 }} />\n                </div>\n            </NavBar>\n\n            {/* 通知栏 */}\n            <NoticeBar\n                content=\"网络测试工具已优化，支持离线缓存和弱网环境检测\"\n                color=\"info\"\n                closeable\n            />\n\n            <div className=\"p-4 space-y-4\">\n                <Tabs\n                    activeKey={activeTab}\n                    onChange={setActiveTab}\n                    style={{\n                        '--title-font-size': '14px',\n                        '--active-title-color': '#1677ff',\n                        '--active-line-color': '#1677ff',\n                    }}\n                >\n                    <Tabs.Tab title=\"网络状态\" key=\"status\">\n                        {renderNetworkStatus()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"测试控制\" key=\"controls\">\n                        {renderTestControls()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"缓存管理\" key=\"cache\">\n                        {renderCacheManagement()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"测试历史\" key=\"history\">\n                        {renderTestHistory()}\n                    </Tabs.Tab>\n                </Tabs>\n            </div>\n\n            {/* 测试报告弹窗 */}\n            <Popup\n                visible={showReport}\n                onMaskClick={() => setShowReport(false)}\n                position=\"bottom\"\n                bodyStyle={{ height: '70vh' }}\n            >\n                <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-lg font-semibold\">测试报告</span>\n                        <Button\n                            size=\"small\"\n                            onClick={() => setShowReport(false)}\n                        >\n                            关闭\n                        </Button>\n                    </div>\n\n                    <div className=\"bg-gray-50 p-3 rounded-lg max-h-96 overflow-y-auto\">\n                        <pre className=\"text-xs whitespace-pre-wrap\">\n                            {networkTester.generateTestReport()}\n                        </pre>\n                    </div>\n                </div>\n            </Popup>\n        </div>\n    );\n};\n\nexport default NetworkTest;\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/NetworkTest.tsx"
    },
    "7": {
      "path": "/device-test",
      "file": "@/pages/DeviceTest.tsx",
      "parentId": "4",
      "id": "7",
      "absPath": "/device-test",
      "__content": "import DeviceInfoPanel from '@/components/DeviceInfoPanel';\nimport deviceDetector from '@/utils/deviceDetector';\nimport {\n    Button,\n    Card,\n    Dialog,\n    Empty,\n    Grid,\n    List,\n    NavBar,\n    NoticeBar,\n    Space,\n    SpinLoading,\n    Tabs,\n    Tag,\n    Toast\n} from 'antd-mobile';\nimport {\n    CheckCircleOutline,\n    CloseCircleOutline,\n    DeleteOutline,\n    DeviceOutline,\n    ExclamationCircleOutline,\n    InfoCircleOutline,\n    MinusCircleOutline,\n    SetOutline,\n    SpeedOutline,\n    StarOutline\n} from 'antd-mobile-icons';\nimport React, { useEffect, useState } from 'react';\n\nconst DeviceTest: React.FC = () => {\n    const [activeTab, setActiveTab] = useState('device-info');\n    const [deviceInfo, setDeviceInfo] = useState<any>(null);\n    const [optimizationInfo, setOptimizationInfo] = useState<any>(null);\n    const [testResults, setTestResults] = useState<any[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        // 初始化设备信息\n        const info = deviceDetector.getDeviceInfo();\n        const optimization = deviceDetector.getOptimizationInfo();\n\n        setDeviceInfo(info);\n        setOptimizationInfo(optimization);\n\n        // 启动设备监控\n        deviceDetector.startMonitoring();\n    }, []);\n\n    const handleOptimizationChange = (optimizations: string[]) => {\n        setOptimizationInfo(prev => ({ ...prev, optimizations }));\n    };\n\n    const runDeviceTest = async () => {\n        setIsLoading(true);\n\n        const results = [];\n\n        // 模拟测试过程\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // 设备类型测试\n        results.push({\n            id: 1,\n            name: '设备类型检测',\n            status: 'success',\n            description: `检测到设备类型: ${deviceInfo?.type}`,\n            details: `品牌: ${deviceInfo?.brand}, 型号: ${deviceInfo?.model}`\n        });\n\n        // 屏幕适配测试\n        results.push({\n            id: 2,\n            name: '屏幕适配测试',\n            status: 'success',\n            description: `屏幕尺寸: ${deviceInfo?.screenWidth}x${deviceInfo?.screenHeight}`,\n            details: `像素比: ${deviceInfo?.pixelRatio}x, 方向: ${deviceInfo?.orientation}`\n        });\n\n        // 触摸支持测试\n        results.push({\n            id: 3,\n            name: '触摸支持测试',\n            status: deviceInfo?.isTouch ? 'success' : 'warning',\n            description: deviceInfo?.isTouch ? '支持触摸操作' : '不支持触摸操作',\n            details: deviceInfo?.isTouch ? '触摸设备优化已启用' : '建议使用鼠标操作'\n        });\n\n        // 高分辨率测试\n        results.push({\n            id: 4,\n            name: '高分辨率测试',\n            status: deviceInfo?.isHighDPI ? 'success' : 'info',\n            description: deviceInfo?.isHighDPI ? '高分辨率屏幕' : '标准分辨率屏幕',\n            details: deviceInfo?.isHighDPI ? '高DPI优化已启用' : '标准分辨率优化'\n        });\n\n        // 性能测试\n        results.push({\n            id: 5,\n            name: '性能测试',\n            status: deviceInfo?.isLowMemory ? 'warning' : 'success',\n            description: deviceInfo?.isLowMemory ? '低内存设备' : '正常内存设备',\n            details: deviceInfo?.isLowMemory ? '低内存优化已启用' : '高性能优化已启用'\n        });\n\n        // 网络测试\n        results.push({\n            id: 6,\n            name: '网络测试',\n            status: deviceInfo?.isSlowNetwork ? 'warning' : 'success',\n            description: deviceInfo?.isSlowNetwork ? '慢速网络' : '正常网络',\n            details: deviceInfo?.isSlowNetwork ? '慢速网络优化已启用' : '标准网络优化'\n        });\n\n        setTestResults(results);\n        setIsLoading(false);\n\n        Toast.show({\n            content: '设备测试完成',\n            position: 'top'\n        });\n    };\n\n    const clearTestResults = () => {\n        Dialog.confirm({\n            content: '确定要清除所有测试结果吗？',\n            onConfirm: () => {\n                setTestResults([]);\n                Toast.show({\n                    content: '测试结果已清除',\n                    position: 'top'\n                });\n            }\n        });\n    };\n\n    const getStatusIcon = (status: string) => {\n        switch (status) {\n            case 'success':\n                return <CheckCircleOutline className=\"text-green-500\" />;\n            case 'warning':\n                return <ExclamationCircleOutline className=\"text-yellow-500\" />;\n            case 'error':\n                return <CloseCircleOutline className=\"text-red-500\" />;\n            case 'info':\n                return <InfoCircleOutline className=\"text-blue-500\" />;\n            default:\n                return <MinusCircleOutline className=\"text-gray-500\" />;\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case 'success':\n                return 'success';\n            case 'warning':\n                return 'warning';\n            case 'error':\n                return 'danger';\n            case 'info':\n                return 'primary';\n            default:\n                return 'default';\n        }\n    };\n\n    const renderDeviceInfo = () => (\n        <div className=\"space-y-4\">\n            <DeviceInfoPanel\n                showDetails={true}\n                onOptimizationChange={handleOptimizationChange}\n            />\n\n            <Card>\n                <Card.Header title=\"设备适配状态\" />\n                <Card.Body>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                            <div className=\"text-2xl font-bold text-green-600\">\n                                {optimizationInfo?.optimizations.length || 0}\n                            </div>\n                            <div className=\"text-sm text-green-600\">已应用优化</div>\n                        </div>\n                        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                            <div className=\"text-2xl font-bold text-blue-600\">\n                                {optimizationInfo?.features.length || 0}\n                            </div>\n                            <div className=\"text-sm text-blue-600\">设备特性</div>\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n\n    const renderAdaptationTest = () => (\n        <div className=\"space-y-4\">\n            <Card>\n                <Card.Header\n                    title=\"设备适配测试\"\n                    extra={\n                        <Space>\n                            <Button\n                                size=\"small\"\n                                fill=\"outline\"\n                                onClick={runDeviceTest}\n                                disabled={isLoading}\n                            >\n                                {isLoading ? <SpinLoading size=\"small\" /> : <SpeedOutline />}\n                                运行测试\n                            </Button>\n                            <Button\n                                size=\"small\"\n                                fill=\"outline\"\n                                onClick={clearTestResults}\n                                disabled={testResults.length === 0}\n                            >\n                                <DeleteOutline />\n                                清除结果\n                            </Button>\n                        </Space>\n                    }\n                />\n                <Card.Body>\n                    <NoticeBar\n                        content=\"点击运行测试按钮开始设备适配测试，系统将自动检测设备特性并验证适配效果\"\n                        color=\"info\"\n                    />\n                </Card.Body>\n            </Card>\n\n            {testResults.length > 0 ? (\n                <Card>\n                    <Card.Header title=\"测试结果\" />\n                    <Card.Body>\n                        <List>\n                            {testResults.map((result) => (\n                                <List.Item\n                                    key={result.id}\n                                    prefix={getStatusIcon(result.status)}\n                                    title={\n                                        <div className=\"flex items-center justify-between\">\n                                            <span>{result.name}</span>\n                                            <Tag color={getStatusColor(result.status)} fill=\"outline\">\n                                                {result.status}\n                                            </Tag>\n                                        </div>\n                                    }\n                                    description={result.description}\n                                    extra={\n                                        <Button\n                                            size=\"mini\"\n                                            fill=\"outline\"\n                                            onClick={() => {\n                                                Toast.show({\n                                                    content: result.details,\n                                                    position: 'top'\n                                                });\n                                            }}\n                                        >\n                                            详情\n                                        </Button>\n                                    }\n                                />\n                            ))}\n                        </List>\n                    </Card.Body>\n                </Card>\n            ) : (\n                <Empty\n                    image={<DeviceOutline className=\"text-gray-400 text-4xl\" />}\n                    description=\"暂无测试结果\"\n                />\n            )}\n        </div>\n    );\n\n    const renderResponsiveDemo = () => (\n        <div className=\"space-y-4\">\n            <Card>\n                <Card.Header title=\"响应式布局演示\" />\n                <Card.Body>\n                    <NoticeBar\n                        content=\"以下内容会根据设备类型自动调整布局和样式\"\n                        color=\"success\"\n                    />\n                </Card.Body>\n            </Card>\n\n            {/* 网格布局演示 */}\n            <Card>\n                <Card.Header title=\"网格布局\" />\n                <Card.Body>\n                    <Grid columns={4} gap={8}>\n                        {Array.from({ length: 8 }, (_, i) => (\n                            <Grid.Item key={i}>\n                                <div className=\"bg-blue-100 p-4 rounded-lg text-center\">\n                                    <div className=\"text-lg font-bold text-blue-600\">{i + 1}</div>\n                                    <div className=\"text-xs text-blue-500\">网格项</div>\n                                </div>\n                            </Grid.Item>\n                        ))}\n                    </Grid>\n                </Card.Body>\n            </Card>\n\n            {/* 按钮组演示 */}\n            <Card>\n                <Card.Header title=\"按钮组\" />\n                <Card.Body>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <Button color=\"primary\" fill=\"solid\">\n                            主要按钮\n                        </Button>\n                        <Button color=\"success\" fill=\"solid\">\n                            成功按钮\n                        </Button>\n                        <Button color=\"warning\" fill=\"solid\">\n                            警告按钮\n                        </Button>\n                        <Button color=\"danger\" fill=\"solid\">\n                            危险按钮\n                        </Button>\n                    </div>\n                </Card.Body>\n            </Card>\n\n            {/* 卡片演示 */}\n            <Card>\n                <Card.Header title=\"卡片组件\" />\n                <Card.Body>\n                    <div className=\"space-y-4\">\n                        <Card>\n                            <Card.Header title=\"基础卡片\" />\n                            <Card.Body>\n                                <p>这是一个基础卡片组件，会根据设备类型自动调整样式。</p>\n                            </Card.Body>\n                        </Card>\n\n                        <Card>\n                            <Card.Header\n                                title=\"带操作的卡片\"\n                                extra={<Button size=\"mini\" fill=\"outline\">操作</Button>}\n                            />\n                            <Card.Body>\n                                <p>卡片可以包含各种操作按钮和内容。</p>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Card.Body>\n            </Card>\n\n            {/* 列表演示 */}\n            <Card>\n                <Card.Header title=\"列表组件\" />\n                <Card.Body>\n                    <List>\n                        <List.Item prefix={<DeviceOutline />} title=\"设备信息\" />\n                        <List.Item prefix={<InfoCircleOutline />} title=\"系统信息\" />\n                        <List.Item prefix={<SetOutline />} title=\"设置选项\" />\n                        <List.Item prefix={<StarOutline />} title=\"收藏项目\" />\n                    </List>\n                </Card.Body>\n            </Card>\n\n            {/* 标签演示 */}\n            <Card>\n                <Card.Header title=\"标签组件\" />\n                <Card.Body>\n                    <div className=\"flex flex-wrap gap-2\">\n                        <Tag color=\"primary\">主要标签</Tag>\n                        <Tag color=\"success\">成功标签</Tag>\n                        <Tag color=\"warning\">警告标签</Tag>\n                        <Tag color=\"danger\">危险标签</Tag>\n                        <Tag color=\"info\">信息标签</Tag>\n                    </div>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n\n    const renderOptimizationDetails = () => (\n        <div className=\"space-y-4\">\n            <Card>\n                <Card.Header title=\"优化详情\" />\n                <Card.Body>\n                    <NoticeBar\n                        content=\"当前设备应用的优化策略和效果\"\n                        color=\"info\"\n                    />\n                </Card.Body>\n            </Card>\n\n            {optimizationInfo && (\n                <>\n                    {/* 优化策略 */}\n                    <Card>\n                        <Card.Header title=\"优化策略\" />\n                        <Card.Body>\n                            <div className=\"space-y-3\">\n                                {optimizationInfo.optimizations.map((optimization: string, index: number) => (\n                                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                                        <div className=\"flex items-center\">\n                                            <CheckCircleOutline className=\"text-green-500 mr-2\" />\n                                            <span>{optimization}</span>\n                                        </div>\n                                        <Tag color=\"success\" fill=\"outline\">已启用</Tag>\n                                    </div>\n                                ))}\n                            </div>\n                        </Card.Body>\n                    </Card>\n\n                    {/* CSS类应用 */}\n                    <Card>\n                        <Card.Header title=\"CSS类应用\" />\n                        <Card.Body>\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                                <div className=\"text-sm font-medium text-gray-700 mb-2\">当前应用的CSS类:</div>\n                                <div className=\"flex flex-wrap gap-1\">\n                                    {optimizationInfo.cssClasses.map((className: string, index: number) => (\n                                        <Tag key={index} color=\"primary\" fill=\"outline\" className=\"text-xs\">\n                                            {className}\n                                        </Tag>\n                                    ))}\n                                </div>\n                            </div>\n                        </Card.Body>\n                    </Card>\n\n                    {/* 设备特性 */}\n                    <Card>\n                        <Card.Header title=\"设备特性\" />\n                        <Card.Body>\n                            <div className=\"space-y-3\">\n                                {optimizationInfo.features.map((feature: string, index: number) => (\n                                    <div key={index} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                                        <div className=\"flex items-center\">\n                                            <StarOutline className=\"text-blue-500 mr-2\" />\n                                            <span>{feature}</span>\n                                        </div>\n                                        <Tag color=\"primary\" fill=\"outline\">支持</Tag>\n                                    </div>\n                                ))}\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"device-test-page\">\n            <NavBar onBack={() => window.history.back()}>\n                设备适配测试\n            </NavBar>\n\n            <div className=\"p-4\">\n                <Tabs\n                    activeKey={activeTab}\n                    onChange={setActiveTab}\n                >\n                    <Tabs.Tab title=\"设备信息\" key=\"device-info\">\n                        {renderDeviceInfo()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"适配测试\" key=\"adaptation-test\">\n                        {renderAdaptationTest()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"响应式演示\" key=\"responsive-demo\">\n                        {renderResponsiveDemo()}\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"优化详情\" key=\"optimization-details\">\n                        {renderOptimizationDetails()}\n                    </Tabs.Tab>\n                </Tabs>\n            </div>\n        </div>\n    );\n};\n\nexport default DeviceTest;\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/DeviceTest.tsx"
    },
    "8": {
      "path": "/bridge-test",
      "file": "@/pages/BridgeTest.tsx",
      "parentId": "4",
      "id": "8",
      "absPath": "/bridge-test",
      "__content": "import { Button, Card, List, NavBar, Space, Toast } from 'antd-mobile'\nimport React, { useEffect, useState } from 'react'\nimport { nativeBridge } from '@/utils/nativeBridge'\nimport { safeBack } from '@/utils/nav'\n\nconst BridgeTest: React.FC = () => {\n  const [deviceInfo, setDeviceInfo] = useState<any>(null)\n  const [networkInfo, setNetworkInfo] = useState<any>(null)\n  const [clipboardText, setClipboardText] = useState<string>('')\n\n  useEffect(() => {\n    nativeBridge.getDeviceInfo().then(setDeviceInfo).catch(() => {})\n    nativeBridge.getNetworkStatus().then(setNetworkInfo).catch(() => {})\n\n    const offDeep = nativeBridge.addEventListener('deepLink', (data) => {\n      Toast.show({ content: `收到 deepLink: ${data?.url || ''}` })\n    })\n    const offImg = nativeBridge.addEventListener('imagePicked', (data) => {\n      Toast.show({ content: `imagePicked: ${data?.items?.length || 0} 张` })\n    })\n    const offFiles = nativeBridge.addEventListener('filesPicked', (data) => {\n      Toast.show({ content: `filesPicked: ${data?.items?.length || 0} 个` })\n    })\n    return () => { offDeep(); offImg(); offFiles() }\n  }, [])\n\n  const rows: Array<{ key: string; action: () => void | Promise<void> }> = [\n    {\n      key: '复制到剪贴板',\n      action: async () => {\n        await nativeBridge.copyToClipboard('Hello from H5')\n        Toast.show({ content: '已复制: Hello from H5' })\n      },\n    },\n    {\n      key: '读取剪贴板文本',\n      action: async () => {\n        const text = await nativeBridge.getClipboardText()\n        setClipboardText(text || '')\n        Toast.show({ content: `剪贴板: ${text || '(空)'}` })\n      },\n    },\n    {\n      key: '系统分享',\n      action: async () => {\n        await nativeBridge.share({ title: '分享标题', text: '来自 Hybrid H5 的分享', url: location.href })\n      },\n    },\n    {\n      key: '文件选择（图片）',\n      action: async () => {\n        const files = await nativeBridge.openFilePicker('image/*', true)\n        Toast.show({ content: `已选择 ${files.length} 个文件` })\n      },\n    },\n    {\n      key: '打开相机拍照',\n      action: async () => {\n        try {\n          const img = await nativeBridge.openCamera()\n          Toast.show({ content: `拍照完成: ${String(img).slice(0, 24)}...` })\n        } catch (e) {\n          Toast.show({ content: '相机不可用或取消' })\n        }\n      },\n    },\n    {\n      key: '震动反馈',\n      action: async () => {\n        await nativeBridge.vibrate(80)\n        Toast.show({ content: '已震动' })\n      },\n    },\n    {\n      key: '设置导航栏标题',\n      action: async () => {\n        await nativeBridge.setNavBar({ title: 'Hybrid Demo', showBack: true })\n        Toast.show({ content: '已请求原生设置标题' })\n      },\n    },\n    {\n      key: '打开深链 myapp://settings',\n      action: async () => {\n        await nativeBridge.openDeepLink('myapp://settings')\n      },\n    },\n    {\n      key: '关闭 WebView',\n      action: async () => {\n        await nativeBridge.closeWebView()\n      },\n    },\n    {\n      key: '获取设备信息',\n      action: async () => {\n        const info = await nativeBridge.getDeviceInfo()\n        setDeviceInfo(info)\n        Toast.show({ content: '已获取设备信息' })\n      },\n    },\n    {\n      key: '获取网络状态',\n      action: async () => {\n        const info = await nativeBridge.getNetworkStatus()\n        setNetworkInfo(info)\n        Toast.show({ content: '已获取网络状态' })\n      },\n    },\n  ]\n\n  return (\n    <div>\n      <NavBar onBack={() => safeBack()}>桥接能力演示</NavBar>\n\n      <div className=\"p-4 space-y-4\">\n        <Card>\n          <Card.Header title=\"环境\" />\n          <Card.Body>\n            <div className=\"text-sm text-gray-600\">平台: {nativeBridge.getPlatform()}</div>\n            <div className=\"text-sm text-gray-600\">原生环境: {String(nativeBridge.isNativeEnvironment())}</div>\n          </Card.Body>\n        </Card>\n\n        <Card>\n          <Card.Header title=\"常用能力\" />\n          <Card.Body>\n            <List>\n              {rows.map((r) => (\n                <List.Item key={r.key} onClick={() => r.action()}>\n                  {r.key}\n                </List.Item>\n              ))}\n            </List>\n          </Card.Body>\n        </Card>\n\n        <Card>\n          <Card.Header title=\"当前信息\" />\n          <Card.Body>\n            <Space direction=\"vertical\" block>\n              <div className=\"text-sm\">剪贴板: {clipboardText || '(空)'}</div>\n              <div className=\"text-sm\">设备: {deviceInfo ? JSON.stringify(deviceInfo) : '未获取'}</div>\n              <div className=\"text-sm\">网络: {networkInfo ? JSON.stringify(networkInfo) : '未获取'}</div>\n            </Space>\n          </Card.Body>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default BridgeTest\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/BridgeTest.tsx"
    },
    "9": {
      "path": "/apps",
      "file": "@/pages/Apps/Apps.tsx",
      "parentId": "4",
      "id": "9",
      "absPath": "/apps",
      "__content": "import { homeConfig } from '@/config/env'\nimport { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport { Card, Grid } from 'antd-mobile'\nimport './Apps.css'\n\nexport default function Apps() {\n    const { isMobile, isTablet } = useDeviceInfo()\n    // 配置已直接导入\n\n    const handleAppClick = (link: string) => {\n        // TODO: 实现应用跳转逻辑\n        console.log('跳转到应用:', link)\n    }\n\n    return (\n        <div className={`apps-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"page-container\">\n                <Card className=\"apps-card\">\n                    <h2 className=\"section-title\">应用中心</h2>\n\n                    <Grid columns={isMobile ? 4 : 6} gap={16}>\n                        {homeConfig.quickActions.map((item: any) => {\n                            // 这里可以根据 icon 字符串动态导入图标组件\n                            return (\n                                <Grid.Item key={item.id}>\n                                    <div\n                                        className=\"app-item\"\n                                        onClick={() => handleAppClick(item.link)}\n                                    >\n                                        <div\n                                            className=\"app-icon\"\n                                            style={{\n                                                backgroundColor: item.color,\n                                                width: isMobile ? '48px' : '56px',\n                                                height: isMobile ? '48px' : '56px',\n                                            }}\n                                        >\n                                            {/* 这里应该渲染对应的图标 */}\n                                            <span className=\"icon-placeholder\">{item.title.charAt(0)}</span>\n                                        </div>\n                                        <div className=\"app-title\">{item.title}</div>\n                                        {item.badge && (\n                                            <div className=\"app-badge\">{item.badge}</div>\n                                        )}\n                                    </div>\n                                </Grid.Item>\n                            )\n                        })}\n                    </Grid>\n                </Card>\n\n                {/* 最近使用 */}\n                <Card className=\"recent-apps-card\">\n                    <h3 className=\"section-title\">最近使用</h3>\n                    <div className=\"recent-apps\">\n                        {homeConfig.quickActions.slice(0, 4).map((item: any) => (\n                            <div\n                                key={`recent-${item.id}`}\n                                className=\"recent-app-item\"\n                                onClick={() => handleAppClick(item.link)}\n                            >\n                                <div\n                                    className=\"recent-app-icon\"\n                                    style={{ backgroundColor: item.color }}\n                                >\n                                    <span className=\"icon-placeholder\">{item.title.charAt(0)}</span>\n                                </div>\n                                <span className=\"recent-app-title\">{item.title}</span>\n                            </div>\n                        ))}\n                    </div>\n                </Card>\n\n                {/* 分类应用 */}\n                <Card className=\"category-apps-card\">\n                    <h3 className=\"section-title\">分类应用</h3>\n                    <div className=\"category-list\">\n                        <div className=\"category-item\">\n                            <h4>办公工具</h4>\n                            <div className=\"category-apps\">\n                                {homeConfig.quickActions.slice(0, 3).map((item: any) => (\n                                    <span\n                                        key={`office-${item.id}`}\n                                        className=\"category-app-tag\"\n                                        onClick={() => handleAppClick(item.link)}\n                                    >\n                                        {item.title}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n\n                        <div className=\"category-item\">\n                            <h4>沟通协作</h4>\n                            <div className=\"category-apps\">\n                                {homeConfig.quickActions.slice(3, 6).map((item: any) => (\n                                    <span\n                                        key={`comm-${item.id}`}\n                                        className=\"category-app-tag\"\n                                        onClick={() => handleAppClick(item.link)}\n                                    >\n                                        {item.title}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Apps/Apps.tsx"
    },
    "10": {
      "path": "/message",
      "file": "@/pages/Message/Message.tsx",
      "parentId": "4",
      "id": "10",
      "absPath": "/message",
      "__content": "import { loading } from '@/stores'\nimport { Avatar, Badge, Empty, InfiniteScroll, List, PullToRefresh, SearchBar, Tabs } from 'antd-mobile'\nimport { BellOutline, MessageOutline } from 'antd-mobile-icons'\nimport React, { useEffect, useState } from 'react'\nimport { history } from 'umi'\nimport './Message.css'\n\ninterface MessageItem {\n  id: string\n  type: 'chat' | 'system' | 'notification'\n  title: string\n  content: string\n  avatar?: string\n  time: string\n  unreadCount?: number\n  isRead: boolean\n}\n\nconst Message: React.FC = () => {\n  const [searchValue, setSearchValue] = useState('')\n  const [activeTab, setActiveTab] = useState('all')\n  const [messages, setMessages] = useState<MessageItem[]>([])\n  const [hasMore, setHasMore] = useState(true)\n  // 消息数据状态\n\n  // 模拟消息数据\n  const mockMessages: MessageItem[] = [\n    {\n      id: '1',\n      type: 'chat',\n      title: '系统管理员',\n      content: '欢迎使用移动工作台！如有任何问题请随时联系我们。',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n      time: '刚刚',\n      unreadCount: 1,\n      isRead: false,\n    },\n    {\n      id: '2',\n      type: 'system',\n      title: '系统通知',\n      content: '您的账户安全设置已更新',\n      time: '2分钟前',\n      isRead: true,\n    },\n    {\n      id: '3',\n      type: 'notification',\n      title: '应用更新',\n      content: '移动工作台已更新到最新版本，快来体验新功能吧！',\n      time: '1小时前',\n      unreadCount: 2,\n      isRead: false,\n    },\n    {\n      id: '4',\n      type: 'chat',\n      title: '张三',\n      content: '今天的会议改到下午3点了',\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',\n      time: '上午10:30',\n      isRead: true,\n    },\n    {\n      id: '5',\n      type: 'system',\n      title: '任务提醒',\n      content: '您有3个待处理的任务即将到期',\n      time: '昨天',\n      unreadCount: 3,\n      isRead: false,\n    },\n  ]\n\n  useEffect(() => {\n    loadMessages()\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const loadMessages = async () => {\n    try {\n      console.log('Loading 对象:', loading)\n      console.log('Loading.show 方法:', typeof loading.show)\n\n      loading.show('加载消息中...')\n      console.log('Loading.show 调用成功')\n\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      setMessages(mockMessages)\n      console.log('消息加载完成')\n    } catch (error) {\n      console.error('Load messages failed:', error)\n    } finally {\n      loading.hide()\n      console.log('Loading.hide 调用成功')\n    }\n  }\n\n  const loadMore = async () => {\n    try {\n      // 模拟加载更多数据\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      setHasMore(false)\n    } catch (error) {\n      console.error('Load more failed:', error)\n    }\n  }\n\n  const handleRefresh = async () => {\n    await loadMessages()\n  }\n\n  const handleMessageClick = (message: MessageItem) => {\n    if (message.type === 'chat') {\n      history.push(`/message/${message.id}`)\n    } else {\n      // 处理系统通知和其他类型消息\n      console.log('Handle message:', message)\n    }\n  }\n\n  const filteredMessages = messages.filter((message) => {\n    const matchesSearch = message.title.toLowerCase().includes(searchValue.toLowerCase()) ||\n      message.content.toLowerCase().includes(searchValue.toLowerCase())\n\n    if (activeTab === 'all') return matchesSearch\n    if (activeTab === 'unread') return matchesSearch && !message.isRead\n    if (activeTab === 'chat') return matchesSearch && message.type === 'chat'\n    if (activeTab === 'system') return matchesSearch && (message.type === 'system' || message.type === 'notification')\n\n    return matchesSearch\n  })\n\n  const getMessageIcon = (type: MessageItem['type']) => {\n    switch (type) {\n      case 'chat':\n        return <MessageOutline />\n      case 'system':\n      case 'notification':\n        return <BellOutline />\n      default:\n        return <MessageOutline />\n    }\n  }\n\n  const tabs = [\n    { key: 'all', title: '全部' },\n    { key: 'unread', title: '未读' },\n    { key: 'chat', title: '聊天' },\n    { key: 'system', title: '通知' },\n  ]\n\n  const renderMessage = (message: MessageItem) => (\n    <List.Item\n      key={message.id}\n      prefix={\n        message.avatar ? (\n          <Avatar src={message.avatar} style={{ '--size': '48px' }} />\n        ) : (\n          <div className=\"message-icon\">\n            {getMessageIcon(message.type)}\n          </div>\n        )\n      }\n      extra={\n        <div className=\"message-extra\">\n          <div className=\"message-time\">{message.time}</div>\n          {message.unreadCount && (\n            <Badge content={message.unreadCount} style={{ '--right': '-2px', '--top': '2px' }} />\n          )}\n        </div>\n      }\n      onClick={() => handleMessageClick(message)}\n      className={`message-item ${!message.isRead ? 'unread' : ''}`}\n    >\n      <div className=\"message-content\">\n        <div className=\"message-title\">{message.title}</div>\n        <div className=\"message-text\">{message.content}</div>\n      </div>\n    </List.Item>\n  )\n\n  return (\n    <div className=\"message-page\">\n      <div className=\"message-header\">\n        <SearchBar\n          placeholder=\"搜索消息\"\n          value={searchValue}\n          onChange={setSearchValue}\n          style={{ '--border-radius': '20px' }}\n        />\n      </div>\n\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        {tabs.map(tab => (\n          <Tabs.Tab title={tab.title} key={tab.key} />\n        ))}\n      </Tabs>\n\n      <div className=\"message-list\">\n        <PullToRefresh onRefresh={handleRefresh}>\n          {filteredMessages.length > 0 ? (\n            <List>\n              {filteredMessages.map(renderMessage)}\n            </List>\n          ) : (\n            <Empty\n              description=\"暂无消息\"\n              image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\n            />\n          )}\n          <InfiniteScroll loadMore={loadMore} hasMore={hasMore}>\n            {hasMore ? '加载中...' : '没有更多了'}\n          </InfiniteScroll>\n        </PullToRefresh>\n      </div>\n    </div>\n  )\n}\n\nexport default Message",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Message/Message.tsx"
    },
    "11": {
      "path": "/profile",
      "file": "@/pages/Profile/Profile.tsx",
      "parentId": "4",
      "id": "11",
      "absPath": "/profile",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport nativeBridge from '@/utils/nativeBridge'\nimport {\n    Avatar,\n    Badge,\n    Button,\n    Card,\n    Grid,\n    List,\n    Space\n} from 'antd-mobile'\nimport {\n    AppOutline,\n    HeartOutline,\n    RightOutline,\n    SetOutline,\n    UserOutline\n} from 'antd-mobile-icons'\nimport './Profile.css'\n\nconst userStats = [\n    { label: '关注', value: '256', key: 'following' },\n    { label: '粉丝', value: '1.2k', key: 'followers' },\n    { label: '获赞', value: '3.6k', key: 'likes' },\n    { label: '积分', value: '8888', key: 'points' }\n]\n\nconst menuItems = [\n    {\n        key: 'orders',\n        title: '我的订单',\n        icon: <AppOutline />,\n        badge: 2,\n        color: '#1677ff'\n    },\n    {\n        key: 'favorites',\n        title: '我的收藏',\n        icon: <HeartOutline />,\n        color: '#ff4d4f'\n    },\n    {\n        key: 'history',\n        title: '浏览历史',\n        icon: <AppOutline />,\n        color: '#52c41a'\n    },\n    {\n        key: 'team',\n        title: '我的团队',\n        icon: <UserOutline />,\n        color: '#722ed1'\n    }\n]\n\nconst settingItems = [\n    {\n        key: 'account',\n        title: '账号设置',\n        icon: <UserOutline />,\n        description: '个人信息、密码设置'\n    },\n    {\n        key: 'notification',\n        title: '消息通知',\n        icon: <SetOutline />,\n        description: '推送设置、隐私设置'\n    },\n    {\n        key: 'help',\n        title: '帮助与反馈',\n        icon: <AppOutline />,\n        description: '常见问题、意见反馈'\n    }\n]\n\nexport default function Profile() {\n    const { isMobile, isTablet } = useDeviceInfo()\n\n    const handleMenuItem = async (key: string) => {\n        console.log('Menu item clicked:', key)\n\n        // 根据功能调用原生能力\n        switch (key) {\n            case 'orders':\n                nativeBridge.showToast('查看我的订单')\n                break\n            case 'favorites':\n                nativeBridge.showToast('查看我的收藏')\n                break\n            case 'history':\n                nativeBridge.showToast('查看浏览历史')\n                break\n            case 'team':\n                nativeBridge.showToast('查看我的团队')\n                break\n            default:\n                console.log('Unknown menu item:', key)\n        }\n    }\n\n    const handleEditProfile = () => {\n        console.log('Edit profile')\n        // TODO: 实现编辑个人信息\n    }\n\n    const handleLogout = () => {\n        console.log('Logout')\n        // TODO: 实现登出功能\n    }\n\n    return (\n        <div className={`profile-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"content-container\">\n                {/* 用户信息卡片 */}\n                <Card className=\"user-info-card\">\n                    <div className=\"user-info\">\n                        <div className=\"user-avatar\">\n                            <Avatar\n                                src=\"https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&q=80\"\n                                style={{ '--size': isMobile ? '64px' : '80px' }}\n                            />\n                            <div className=\"edit-avatar\" onClick={handleEditProfile}>\n                                <UserOutline />\n                            </div>\n                        </div>\n                        <div className=\"user-details\">\n                            <h3 className=\"user-name\">张三</h3>\n                            <p className=\"user-desc\">产品经理 · 北京</p>\n                            <p className=\"user-id\">ID: 123456789</p>\n                        </div>\n                    </div>\n                </Card>\n\n                {/* 用户统计 */}\n                <Card className=\"user-stats-card\">\n                    <Grid columns={4} gap={0}>\n                        {userStats.map(stat => (\n                            <Grid.Item key={stat.key}>\n                                <div className=\"stat-item\" onClick={() => handleMenuItem(stat.key)}>\n                                    <div className=\"stat-value\">{stat.value}</div>\n                                    <div className=\"stat-label\">{stat.label}</div>\n                                </div>\n                            </Grid.Item>\n                        ))}\n                    </Grid>\n                </Card>\n\n                {/* 功能菜单 */}\n                <Card className=\"menu-card\">\n                    <Grid columns={isMobile ? 4 : 6} gap={16}>\n                        {menuItems.map(item => (\n                            <Grid.Item key={item.key}>\n                                <div\n                                    className=\"menu-item\"\n                                    onClick={() => handleMenuItem(item.key)}\n                                >\n                                    <div\n                                        className=\"menu-icon\"\n                                        style={{ backgroundColor: `${item.color}15`, color: item.color }}\n                                    >\n                                        {item.icon}\n                                        {item.badge && (\n                                            <Badge\n                                                content={item.badge}\n                                                style={{ position: 'absolute', top: '-4px', right: '-4px' }}\n                                            />\n                                        )}\n                                    </div>\n                                    <span className=\"menu-title\">{item.title}</span>\n                                </div>\n                            </Grid.Item>\n                        ))}\n                    </Grid>\n                </Card>\n\n                {/* 设置列表 */}\n                <Card title=\"设置\" className=\"settings-card\">\n                    <List>\n                        {settingItems.map(item => (\n                            <List.Item\n                                key={item.key}\n                                prefix={\n                                    <div className=\"setting-icon\">\n                                        {item.icon}\n                                    </div>\n                                }\n                                extra={<RightOutline />}\n                                description={item.description}\n                                onClick={() => handleMenuItem(item.key)}\n                                clickable\n                            >\n                                {item.title}\n                            </List.Item>\n                        ))}\n                    </List>\n                </Card>\n\n                {/* 操作按钮 */}\n                <div className=\"action-buttons\">\n                    <Space direction=\"vertical\" block>\n                        <Button color=\"primary\" size=\"large\" block onClick={handleEditProfile}>\n                            编辑个人信息\n                        </Button>\n                        <Button size=\"large\" block onClick={handleLogout}>\n                            退出登录\n                        </Button>\n                    </Space>\n                </div>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Profile/Profile.tsx"
    },
    "12": {
      "path": "/settings",
      "file": "@/pages/Settings/Settings.tsx",
      "parentId": "4",
      "id": "12",
      "absPath": "/settings",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport {\n    Button,\n    Card,\n    List,\n    Modal,\n    Selector,\n    Space,\n    Switch,\n    Toast\n} from 'antd-mobile'\nimport {\n    BellOutline,\n    DeleteOutline,\n    ExclamationCircleOutline,\n    EyeInvisibleOutline,\n    GlobalOutline,\n    MoonOutline,\n    RightOutline,\n    SoundOutline\n} from 'antd-mobile-icons'\nimport { useState } from 'react'\nimport './Settings.css'\n\nconst languageOptions = [\n    { label: '简体中文', value: 'zh-CN' },\n    { label: 'English', value: 'en-US' },\n    { label: '繁體中文', value: 'zh-TW' },\n    { label: '日本語', value: 'ja-JP' }\n]\n\nconst themeOptions = [\n    { label: '跟随系统', value: 'auto' },\n    { label: '浅色模式', value: 'light' },\n    { label: '深色模式', value: 'dark' }\n]\n\nexport default function Settings() {\n    const { isMobile, isTablet } = useDeviceInfo()\n\n    // 设置状态\n    const [notifications, setNotifications] = useState(true)\n    const [soundEnabled, setSoundEnabled] = useState(true)\n    const [darkMode, setDarkMode] = useState(false)\n    const [language, setLanguage] = useState(['zh-CN'])\n    const [theme, setTheme] = useState(['auto'])\n    const [privacyMode, setPrivacyMode] = useState(false)\n\n    const handleClearCache = () => {\n        Modal.confirm({\n            title: '清除缓存',\n            content: '确定要清除所有缓存数据吗？这将会重新加载应用。',\n            onConfirm: () => {\n                // TODO: 实现清除缓存功能\n                Toast.show({\n                    icon: 'success',\n                    content: '缓存已清除',\n                })\n            }\n        })\n    }\n\n    const handleResetSettings = () => {\n        Modal.confirm({\n            title: '重置设置',\n            content: '确定要重置所有设置到默认状态吗？',\n            onConfirm: () => {\n                setNotifications(true)\n                setSoundEnabled(true)\n                setDarkMode(false)\n                setLanguage(['zh-CN'])\n                setTheme(['auto'])\n                setPrivacyMode(false)\n                Toast.show({\n                    icon: 'success',\n                    content: '设置已重置',\n                })\n            }\n        })\n    }\n\n    const handleAbout = () => {\n        Modal.alert({\n            title: '关于应用',\n            content: (\n                <div className=\"about-content\">\n                    <p><strong>应用名称：</strong>移动端应用</p>\n                    <p><strong>版本号：</strong>v1.0.0</p>\n                    <p><strong>构建时间：</strong>2024-01-15</p>\n                    <p><strong>技术栈：</strong>React + Vite + antd-mobile</p>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div className={`settings-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"content-container\">\n                {/* 通知设置 */}\n                <Card title=\"通知设置\" className=\"settings-section\">\n                    <List>\n                        <List.Item\n                            prefix={<BellOutline />}\n                            extra={\n                                <Switch\n                                    checked={notifications}\n                                    onChange={setNotifications}\n                                />\n                            }\n                            description=\"接收应用推送通知\"\n                        >\n                            推送通知\n                        </List.Item>\n                        <List.Item\n                            prefix={<SoundOutline />}\n                            extra={\n                                <Switch\n                                    checked={soundEnabled}\n                                    onChange={setSoundEnabled}\n                                    disabled={!notifications}\n                                />\n                            }\n                            description=\"通知声音提醒\"\n                        >\n                            声音提醒\n                        </List.Item>\n                    </List>\n                </Card>\n\n                {/* 显示设置 */}\n                <Card title=\"显示设置\" className=\"settings-section\">\n                    <List>\n                        <List.Item\n                            prefix={<MoonOutline />}\n                            extra={\n                                <Switch\n                                    checked={darkMode}\n                                    onChange={setDarkMode}\n                                />\n                            }\n                            description=\"开启深色模式\"\n                        >\n                            深色模式\n                        </List.Item>\n                    </List>\n\n                    <div className=\"selector-item\">\n                        <div className=\"selector-label\">\n                            <GlobalOutline />\n                            <span>主题模式</span>\n                        </div>\n                        <Selector\n                            options={themeOptions}\n                            value={theme}\n                            onChange={setTheme}\n                            columns={3}\n                        />\n                    </div>\n                </Card>\n\n                {/* 语言设置 */}\n                <Card title=\"语言设置\" className=\"settings-section\">\n                    <div className=\"selector-item\">\n                        <div className=\"selector-label\">\n                            <GlobalOutline />\n                            <span>界面语言</span>\n                        </div>\n                        <Selector\n                            options={languageOptions}\n                            value={language}\n                            onChange={setLanguage}\n                            columns={2}\n                        />\n                    </div>\n                </Card>\n\n                {/* 隐私设置 */}\n                <Card title=\"隐私设置\" className=\"settings-section\">\n                    <List>\n                        <List.Item\n                            prefix={<EyeInvisibleOutline />}\n                            extra={\n                                <Switch\n                                    checked={privacyMode}\n                                    onChange={setPrivacyMode}\n                                />\n                            }\n                            description=\"隐藏敏感信息\"\n                        >\n                            隐私模式\n                        </List.Item>\n                    </List>\n                </Card>\n\n                {/* 数据管理 */}\n                <Card title=\"数据管理\" className=\"settings-section\">\n                    <List>\n                        <List.Item\n                            prefix={<DeleteOutline />}\n                            extra={<RightOutline />}\n                            onClick={handleClearCache}\n                            clickable\n                            description=\"清除应用缓存数据\"\n                        >\n                            清除缓存\n                        </List.Item>\n                    </List>\n                </Card>\n\n                {/* 其他设置 */}\n                <Card title=\"其他\" className=\"settings-section\">\n                    <List>\n                        <List.Item\n                            prefix={<ExclamationCircleOutline />}\n                            extra={<RightOutline />}\n                            onClick={handleAbout}\n                            clickable\n                            description=\"查看应用版本信息\"\n                        >\n                            关于应用\n                        </List.Item>\n                    </List>\n                </Card>\n\n                {/* 操作按钮 */}\n                <div className=\"action-buttons\">\n                    <Space direction=\"vertical\" block>\n                        <Button\n                            color=\"danger\"\n                            size=\"large\"\n                            block\n                            onClick={handleResetSettings}\n                        >\n                            重置所有设置\n                        </Button>\n                    </Space>\n                </div>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Settings/Settings.tsx"
    },
    "13": {
      "path": "/notifications",
      "file": "@/pages/Notifications/Notifications.tsx",
      "parentId": "4",
      "id": "13",
      "absPath": "/notifications",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport { Badge, Card, List, Switch, Tabs } from 'antd-mobile'\nimport { BellOutline, MessageOutline } from 'antd-mobile-icons'\nimport { useState } from 'react'\nimport './Notifications.css'\n\n// 模拟通知数据\nconst mockNotifications = [\n    {\n        id: 1,\n        type: 'system',\n        title: '系统更新',\n        content: '新版本 v2.1.0 已发布，包含重要安全更新',\n        time: '2小时前',\n        read: false,\n        important: true,\n    },\n    {\n        id: 2,\n        type: 'message',\n        title: '新消息',\n        content: '您有 3 条未读消息',\n        time: '3小时前',\n        read: false,\n        important: false,\n    },\n    {\n        id: 3,\n        type: 'system',\n        title: '维护通知',\n        content: '系统将于今晚 23:00-24:00 进行维护',\n        time: '1天前',\n        read: true,\n        important: true,\n    },\n    {\n        id: 4,\n        type: 'activity',\n        title: '登录异常',\n        content: '检测到异地登录，请注意账户安全',\n        time: '2天前',\n        read: true,\n        important: true,\n    },\n    {\n        id: 5,\n        type: 'message',\n        title: '群聊消息',\n        content: '项目讨论组有新的消息',\n        time: '3天前',\n        read: true,\n        important: false,\n    },\n]\n\nconst notificationSettings = [\n    {\n        key: 'push',\n        title: '推送通知',\n        description: '接收重要通知的推送',\n        enabled: true,\n    },\n    {\n        key: 'sound',\n        title: '声音提醒',\n        description: '新通知时播放提示音',\n        enabled: true,\n    },\n    {\n        key: 'vibrate',\n        title: '震动提醒',\n        description: '新通知时设备震动',\n        enabled: false,\n    },\n    {\n        key: 'preview',\n        title: '消息预览',\n        description: '在通知中显示消息内容',\n        enabled: true,\n    },\n]\n\nexport default function Notifications() {\n    const { isMobile, isTablet } = useDeviceInfo()\n    const [activeTab, setActiveTab] = useState('all')\n    const [settings, setSettings] = useState(notificationSettings)\n\n    const handleNotificationClick = (notificationId: number) => {\n        console.log('查看通知详情:', notificationId)\n        // TODO: 实现通知详情页面\n    }\n\n    const handleMarkAllRead = () => {\n        console.log('标记所有通知为已读')\n        // TODO: 实现标记已读功能\n    }\n\n    const handleClearAll = () => {\n        console.log('清空所有通知')\n        // TODO: 实现清空通知功能\n    }\n\n    const handleSettingChange = (key: string, value: boolean) => {\n        setSettings(prev => prev.map(item =>\n            item.key === key ? { ...item, enabled: value } : item\n        ))\n    }\n\n    const filteredNotifications = mockNotifications.filter(notification => {\n        if (activeTab === 'all') return true\n        if (activeTab === 'unread') return !notification.read\n        if (activeTab === 'important') return notification.important\n        return true\n    })\n\n    const getNotificationIcon = (type: string) => {\n        switch (type) {\n            case 'system':\n                return <BellOutline />\n            case 'message':\n                return <MessageOutline />\n            default:\n                return <BellOutline />\n        }\n    }\n\n    const getNotificationColor = (type: string) => {\n        switch (type) {\n            case 'system':\n                return '#1677ff'\n            case 'message':\n                return '#52c41a'\n            case 'activity':\n                return '#faad14'\n            default:\n                return '#666666'\n        }\n    }\n\n    const renderNotificationItem = (item: typeof mockNotifications[0]) => (\n        <List.Item\n            key={item.id}\n            prefix={\n                <div\n                    className=\"notification-icon\"\n                    style={{ backgroundColor: getNotificationColor(item.type) }}\n                >\n                    {getNotificationIcon(item.type)}\n                </div>\n            }\n            description={\n                <div className=\"notification-content\">\n                    <span className=\"notification-text\">{item.content}</span>\n                    <span className=\"notification-time\">{item.time}</span>\n                </div>\n            }\n            extra={\n                <div className=\"notification-extra\">\n                    {item.important && <Badge content=\"重要\" color=\"#f5222d\" />}\n                    {!item.read && <div className=\"unread-dot\" />}\n                </div>\n            }\n            onClick={() => handleNotificationClick(item.id)}\n            className={`notification-item ${!item.read ? 'unread' : ''} ${item.important ? 'important' : ''}`}\n        >\n            <div className=\"notification-title\">{item.title}</div>\n        </List.Item>\n    )\n\n    return (\n        <div className={`notifications-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"page-container\">\n                <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"notification-tabs\">\n                    <Tabs.Tab title=\"全部\" key=\"all\">\n                        <div className=\"notification-actions\">\n                            <button className=\"action-button\" onClick={handleMarkAllRead}>\n                                全部已读\n                            </button>\n                            <button className=\"action-button secondary\" onClick={handleClearAll}>\n                                清空通知\n                            </button>\n                        </div>\n\n                        <Card className=\"notification-list-card\">\n                            {filteredNotifications.length > 0 ? (\n                                <List className=\"notification-list\">\n                                    {filteredNotifications.map(renderNotificationItem)}\n                                </List>\n                            ) : (\n                                <div className=\"empty-state\">\n                                    <BellOutline className=\"empty-icon\" />\n                                    <p>暂无通知</p>\n                                </div>\n                            )}\n                        </Card>\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"未读\" key=\"unread\">\n                        <Card className=\"notification-list-card\">\n                            {filteredNotifications.length > 0 ? (\n                                <List className=\"notification-list\">\n                                    {filteredNotifications.map(renderNotificationItem)}\n                                </List>\n                            ) : (\n                                <div className=\"empty-state\">\n                                    <BellOutline className=\"empty-icon\" />\n                                    <p>没有未读通知</p>\n                                </div>\n                            )}\n                        </Card>\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"重要\" key=\"important\">\n                        <Card className=\"notification-list-card\">\n                            {filteredNotifications.length > 0 ? (\n                                <List className=\"notification-list\">\n                                    {filteredNotifications.map(renderNotificationItem)}\n                                </List>\n                            ) : (\n                                <div className=\"empty-state\">\n                                    <BellOutline className=\"empty-icon\" />\n                                    <p>没有重要通知</p>\n                                </div>\n                            )}\n                        </Card>\n                    </Tabs.Tab>\n\n                    <Tabs.Tab title=\"设置\" key=\"settings\">\n                        <Card className=\"settings-card\">\n                            <h3 className=\"section-title\">通知设置</h3>\n                            <List className=\"settings-list\">\n                                {settings.map(setting => (\n                                    <List.Item\n                                        key={setting.key}\n                                        extra={\n                                            <Switch\n                                                checked={setting.enabled}\n                                                onChange={(checked) => handleSettingChange(setting.key, checked)}\n                                            />\n                                        }\n                                        description={setting.description}\n                                    >\n                                        {setting.title}\n                                    </List.Item>\n                                ))}\n                            </List>\n                        </Card>\n                    </Tabs.Tab>\n                </Tabs>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Notifications/Notifications.tsx"
    },
    "14": {
      "path": "/documents",
      "file": "@/pages/Documents/Documents.tsx",
      "parentId": "4",
      "id": "14",
      "absPath": "/documents",
      "__content": "import { Button, Empty, List, SearchBar, Spin } from 'antd-mobile'\nimport { AddOutline, DocumentOutline } from 'antd-mobile-icons'\nimport React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'umi'\n\ninterface Document {\n    id: string\n    title: string\n    type: 'doc' | 'sheet' | 'slide'\n    lastModified: string\n    size: string\n    owner: string\n}\n\nconst Documents: React.FC = () => {\n    const [documents, setDocuments] = useState<Document[]>([])\n    const [loading, setLoading] = useState(true)\n    const [searchValue, setSearchValue] = useState('')\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        // 模拟加载文档数据\n        setTimeout(() => {\n            setDocuments([\n                {\n                    id: '1',\n                    title: '项目需求文档',\n                    type: 'doc',\n                    lastModified: '2025-01-27 14:30',\n                    size: '2.5MB',\n                    owner: '张三'\n                },\n                {\n                    id: '2',\n                    title: '财务报表2024',\n                    type: 'sheet',\n                    lastModified: '2025-01-26 16:20',\n                    size: '1.8MB',\n                    owner: '李四'\n                },\n                {\n                    id: '3',\n                    title: '产品演示文稿',\n                    type: 'slide',\n                    lastModified: '2025-01-25 10:15',\n                    size: '5.2MB',\n                    owner: '王五'\n                }\n            ])\n            setLoading(false)\n        }, 1000)\n    }, [])\n\n    const getTypeIcon = (type: string) => {\n        switch (type) {\n            case 'doc':\n                return '📄'\n            case 'sheet':\n                return '📊'\n            case 'slide':\n                return '📽️'\n            default:\n                return '📄'\n        }\n    }\n\n    const getTypeText = (type: string) => {\n        switch (type) {\n            case 'doc':\n                return '文档'\n            case 'sheet':\n                return '表格'\n            case 'slide':\n                return '演示'\n            default:\n                return '文档'\n        }\n    }\n\n    const filteredDocuments = documents.filter(doc =>\n        doc.title.toLowerCase().includes(searchValue.toLowerCase())\n    )\n\n    const handleCreateDocument = () => {\n        // 创建新文档的逻辑\n        console.log('创建新文档')\n    }\n\n    const handleDocumentClick = (doc: Document) => {\n        // 打开文档的逻辑\n        console.log('打开文档:', doc.title)\n    }\n\n    if (loading) {\n        return (\n            <div className=\"flex items-center justify-center h-64\">\n                <Spin size=\"large\" />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"p-4 bg-gray-50 min-h-screen\">\n            {/* 头部搜索 */}\n            <div className=\"mb-4\">\n                <SearchBar\n                    placeholder=\"搜索文档...\"\n                    value={searchValue}\n                    onChange={setSearchValue}\n                    className=\"bg-white rounded-lg\"\n                />\n            </div>\n\n            {/* 创建按钮 */}\n            <div className=\"mb-4\">\n                <Button\n                    block\n                    color=\"primary\"\n                    onClick={handleCreateDocument}\n                    className=\"rounded-lg\"\n                >\n                    <AddOutline className=\"mr-2\" />\n                    创建新文档\n                </Button>\n            </div>\n\n            {/* 文档列表 */}\n            {filteredDocuments.length > 0 ? (\n                <List className=\"bg-white rounded-lg\">\n                    {filteredDocuments.map((doc) => (\n                        <List.Item\n                            key={doc.id}\n                            onClick={() => handleDocumentClick(doc)}\n                            arrow\n                            className=\"border-b border-gray-100 last:border-b-0\"\n                        >\n                            <div className=\"flex items-center\">\n                                <div className=\"text-2xl mr-3\">\n                                    {getTypeIcon(doc.type)}\n                                </div>\n                                <div className=\"flex-1\">\n                                    <div className=\"font-medium text-gray-900\">{doc.title}</div>\n                                    <div className=\"text-sm text-gray-500 mt-1\">\n                                        {getTypeText(doc.type)} • {doc.owner} • {doc.lastModified}\n                                    </div>\n                                </div>\n                                <div className=\"text-xs text-gray-400\">\n                                    {doc.size}\n                                </div>\n                            </div>\n                        </List.Item>\n                    ))}\n                </List>\n            ) : (\n                <Empty\n                    description=\"暂无文档\"\n                    image={<DocumentOutline className=\"text-4xl text-gray-300\" />}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Documents\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Documents/Documents.tsx"
    },
    "15": {
      "path": "/checkin",
      "file": "@/pages/Checkin/Checkin.tsx",
      "parentId": "4",
      "id": "15",
      "absPath": "/checkin",
      "__content": "import { Button, Card, List, Toast } from 'antd-mobile'\nimport { CalendarOutline, ClockOutline, LocationOutline } from 'antd-mobile-icons'\nimport React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'umi'\n\ninterface CheckinRecord {\n    id: string\n    date: string\n    time: string\n    type: 'in' | 'out'\n    location: string\n    status: 'success' | 'late' | 'early'\n}\n\nconst Checkin: React.FC = () => {\n    const [loading, setLoading] = useState(false)\n    const [todayRecords, setTodayRecords] = useState<CheckinRecord[]>([])\n    const [currentTime, setCurrentTime] = useState(new Date())\n    const [location, setLocation] = useState('正在获取位置...')\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        // 更新当前时间\n        const timer = setInterval(() => {\n            setCurrentTime(new Date())\n        }, 1000)\n\n        // 获取位置信息\n        getLocation()\n\n        // 加载今日打卡记录\n        loadTodayRecords()\n\n        return () => clearInterval(timer)\n    }, [])\n\n    const getLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords\n                    // 这里可以调用地图API获取具体地址\n                    setLocation('北京市朝阳区xxx大厦')\n                },\n                (error) => {\n                    console.error('获取位置失败:', error)\n                    setLocation('位置获取失败')\n                }\n            )\n        } else {\n            setLocation('浏览器不支持定位')\n        }\n    }\n\n    const loadTodayRecords = () => {\n        // 模拟加载今日打卡记录\n        const mockRecords: CheckinRecord[] = [\n            {\n                id: '1',\n                date: '2025-01-27',\n                time: '09:00',\n                type: 'in',\n                location: '北京市朝阳区xxx大厦',\n                status: 'success'\n            },\n            {\n                id: '2',\n                date: '2025-01-27',\n                time: '12:00',\n                type: 'out',\n                location: '北京市朝阳区xxx大厦',\n                status: 'success'\n            }\n        ]\n        setTodayRecords(mockRecords)\n    }\n\n    const handleCheckin = async (type: 'in' | 'out') => {\n        setLoading(true)\n\n        try {\n            // 模拟打卡请求\n            await new Promise(resolve => setTimeout(resolve, 1000))\n\n            const newRecord: CheckinRecord = {\n                id: Date.now().toString(),\n                date: currentTime.toISOString().split('T')[0],\n                time: currentTime.toLocaleTimeString('zh-CN', {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                }),\n                type,\n                location,\n                status: 'success'\n            }\n\n            setTodayRecords(prev => [...prev, newRecord])\n\n            Toast.show({\n                content: `${type === 'in' ? '上班' : '下班'}打卡成功！`,\n                position: 'center',\n            })\n        } catch (error) {\n            Toast.show({\n                content: '打卡失败，请重试',\n                position: 'center',\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const getStatusText = (status: string) => {\n        switch (status) {\n            case 'success':\n                return '正常'\n            case 'late':\n                return '迟到'\n            case 'early':\n                return '早退'\n            default:\n                return '正常'\n        }\n    }\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case 'success':\n                return 'text-green-600'\n            case 'late':\n                return 'text-red-600'\n            case 'early':\n                return 'text-orange-600'\n            default:\n                return 'text-green-600'\n        }\n    }\n\n    const formatTime = (date: Date) => {\n        return date.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        })\n    }\n\n    const formatDate = (date: Date) => {\n        return date.toLocaleDateString('zh-CN', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            weekday: 'long'\n        })\n    }\n\n    return (\n        <div className=\"p-4 bg-gray-50 min-h-screen\">\n            {/* 时间显示 */}\n            <Card className=\"mb-4 text-center\">\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {formatTime(currentTime)}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                    {formatDate(currentTime)}\n                </div>\n            </Card>\n\n            {/* 位置信息 */}\n            <Card className=\"mb-4\">\n                <div className=\"flex items-center\">\n                    <LocationOutline className=\"mr-2 text-blue-500\" />\n                    <span className=\"text-sm text-gray-600\">{location}</span>\n                </div>\n            </Card>\n\n            {/* 打卡按钮 */}\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                <Button\n                    block\n                    color=\"primary\"\n                    size=\"large\"\n                    loading={loading}\n                    onClick={() => handleCheckin('in')}\n                    className=\"h-12 text-lg font-medium\"\n                >\n                    上班打卡\n                </Button>\n                <Button\n                    block\n                    color=\"success\"\n                    size=\"large\"\n                    loading={loading}\n                    onClick={() => handleCheckin('out')}\n                    className=\"h-12 text-lg font-medium\"\n                >\n                    下班打卡\n                </Button>\n            </div>\n\n            {/* 今日记录 */}\n            <Card>\n                <div className=\"flex items-center mb-4\">\n                    <CalendarOutline className=\"mr-2 text-blue-500\" />\n                    <span className=\"font-medium\">今日打卡记录</span>\n                </div>\n\n                {todayRecords.length > 0 ? (\n                    <List>\n                        {todayRecords.map((record) => (\n                            <List.Item\n                                key={record.id}\n                                prefix={\n                                    <div className={`w-3 h-3 rounded-full ${record.type === 'in' ? 'bg-blue-500' : 'bg-green-500'\n                                        }`} />\n                                }\n                                extra={\n                                    <span className={`text-sm ${getStatusColor(record.status)}`}>\n                                        {getStatusText(record.status)}\n                                    </span>\n                                }\n                            >\n                                <div className=\"flex items-center\">\n                                    <ClockOutline className=\"mr-2 text-gray-400\" />\n                                    <span className=\"font-medium\">\n                                        {record.type === 'in' ? '上班' : '下班'}\n                                    </span>\n                                    <span className=\"ml-2 text-gray-500\">{record.time}</span>\n                                </div>\n                                <div className=\"text-xs text-gray-400 mt-1\">\n                                    {record.location}\n                                </div>\n                            </List.Item>\n                        ))}\n                    </List>\n                ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                        暂无打卡记录\n                    </div>\n                )}\n            </Card>\n        </div>\n    )\n}\n\nexport default Checkin\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Checkin/Checkin.tsx"
    },
    "16": {
      "path": "/task-process",
      "file": "@/pages/TaskProcess/TaskList/index.tsx",
      "parentId": "4",
      "id": "16",
      "absPath": "/task-process",
      "__content": "import { useTaskProcessStore } from '@/stores/taskProcessStore'\nimport {\n    Button,\n    Card,\n    Empty,\n    InfiniteScroll,\n    PullToRefresh,\n    SearchBar,\n    SpinLoading,\n    Tabs,\n    Tag\n} from 'antd-mobile'\nimport { ClockCircleOutline, FilterOutline } from 'antd-mobile-icons'\nimport React, { useEffect, useState } from 'react'\nimport { history } from 'umi'\nimport './index.css'\n\nconst TaskList: React.FC = () => {\n    const {\n        state: { tasks: taskList, taskLoading: loading, taskPagination },\n        loadTaskList,\n        setSelectedTaskInfo\n    } = useTaskProcessStore()\n\n    // 计算是否还有更多数据\n    const hasMore = taskList.length < taskPagination.total\n\n    const [activeTab, setActiveTab] = useState('all')\n    const [searchText, setSearchText] = useState('')\n\n    useEffect(() => {\n        loadTaskList()\n    }, [])\n\n    const handleTaskClick = (task: any) => {\n        setSelectedTaskInfo(task)\n        console.log('📋 列表页选中任务:', task)\n        history.push(`/task-process/detail/${task.id}`)\n    }\n\n    const loadMore = async () => {\n        if (!hasMore || loading) return\n        // 直接调用loadTaskList，它会自动处理分页\n        await loadTaskList()\n    }\n\n    const onRefresh = async () => {\n        await loadTaskList()\n    }\n\n    const renderTaskCard = (task: any) => (\n        <Card\n            key={task.id}\n            className=\"task-card\"\n            onClick={() => handleTaskClick(task)}\n        >\n            <div className=\"task-card-header\">\n                <div className=\"task-info\">\n                    <div className=\"task-id\">流程编号：{task.id}</div>\n                    <div className=\"task-title\">{task.title}</div>\n                    <div className=\"task-meta\">\n                        <Tag className=\"task-type\" color=\"primary\">\n                            {task.type}\n                        </Tag>\n                        <Tag className=\"task-priority\" color=\"warning\">\n                            {task.priority}\n                        </Tag>\n                        <Tag className=\"task-status\" color=\"default\">\n                            {task.status}\n                        </Tag>\n                    </div>\n                </div>\n            </div>\n            <div className=\"task-meta\">\n                <span>申请人：{task.applicant}</span>\n                <span>申请部门：{task.applicantDept}</span>\n            </div>\n            <div className=\"task-meta\">\n                <span>当前步骤：{task.currentStep}</span>\n                <span>\n                    <ClockCircleOutline style={{ marginRight: 4 }} />\n                    截止时间：2024/12/11\n                </span>\n            </div>\n        </Card>\n    )\n\n    return (\n        <div className=\"task-list-page\">\n            {/* 搜索头部 */}\n            <div className=\"search-header\">\n                <SearchBar\n                    className=\"task-search-bar\"\n                    placeholder=\"搜索任务标题、流程编号\"\n                    value={searchText}\n                    onChange={setSearchText}\n                />\n                <Button className=\"filter-button\">\n                    <FilterOutline />\n                </Button>\n            </div>\n\n            {/* Tab切换 */}\n            <div className=\"tabs-container\">\n                <Tabs\n                    className=\"task-tabs\"\n                    activeKey={activeTab}\n                    onChange={setActiveTab}\n                >\n                    <Tabs.Tab title=\"全部\" key=\"all\" />\n                    <Tabs.Tab title=\"待处理\" key=\"pending\" />\n                    <Tabs.Tab title=\"处理中\" key=\"processing\" />\n                    <Tabs.Tab title=\"已完成\" key=\"completed\" />\n                </Tabs>\n            </div>\n\n            {/* 任务列表 */}\n            <div className=\"task-list-container\">\n                <PullToRefresh onRefresh={onRefresh}>\n                    <div className=\"task-grid\">\n                        {loading && taskList.length === 0 ? (\n                            <div style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                padding: '50px 0'\n                            }}>\n                                <SpinLoading size=\"large\" />\n                            </div>\n                        ) : taskList.length === 0 ? (\n                            <Empty\n                                description=\"暂无任务数据\"\n                                style={{ padding: '50px 0' }}\n                            />\n                        ) : (\n                            taskList.map(renderTaskCard)\n                        )}\n                    </div>\n                    <InfiniteScroll loadMore={loadMore} hasMore={hasMore}>\n                        {hasMore ? (\n                            <div className=\"infinite-scroll-content\">\n                                <SpinLoading />\n                                <span>加载中...</span>\n                            </div>\n                        ) : (\n                            <div className=\"infinite-scroll-content\">\n                                没有更多了\n                            </div>\n                        )}\n                    </InfiniteScroll>\n                </PullToRefresh>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskList",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/TaskProcess/TaskList/index.tsx"
    },
    "17": {
      "path": "/apps/:id",
      "file": "@/pages/Apps/AppDetail.tsx",
      "parentId": "4",
      "id": "17",
      "absPath": "/apps/:id",
      "__content": "import { Button, Card, NavBar, Space, Tag } from 'antd-mobile'\nimport React from 'react'\nimport { history, useParams } from 'umi'\n\nconst AppDetail: React.FC = () => {\n    const { id } = useParams<{ id: string }>()\n\n    return (\n        <div style={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>\n            <NavBar onBack={() => history.back()}>应用详情</NavBar>\n            <div style={{ padding: 16 }}>\n                <Card>\n                    <h2>应用详情 #{id}</h2>\n                    <Space wrap>\n                        <Tag color=\"primary\">办公工具</Tag>\n                        <Tag color=\"success\">免费</Tag>\n                    </Space>\n                    <p style={{ marginTop: 16 }}>这是一个应用详情页面...</p>\n                    <Button color=\"primary\" block style={{ marginTop: 16 }}>\n                        使用应用\n                    </Button>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default AppDetail\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Apps/AppDetail.tsx"
    },
    "18": {
      "path": "/task-process/detail/:id",
      "file": "@/pages/TaskProcess/TaskDetail/index.tsx",
      "parentId": "4",
      "id": "18",
      "absPath": "/task-process/detail/:id",
      "__content": "import { useTaskProcessStore } from '@/stores/taskProcessStore'\nimport {\n    Button,\n    Card,\n    NavBar,\n    SpinLoading,\n    Tabs\n} from 'antd-mobile'\nimport {\n    ClockCircleOutline,\n    ExclamationCircleOutline,\n    LeftOutline\n} from 'antd-mobile-icons'\nimport React, { useEffect, useState } from 'react'\nimport { history, useParams } from 'umi'\nimport ProcessPanel from './components/ProcessPanel'\nimport ProcessRecord from './components/ProcessRecord'\nimport TaskInfo from './components/TaskInfo'\nimport './index.css'\n\nconst TaskDetail: React.FC = () => {\n    const { id } = useParams<{ id: string }>()\n    const {\n        state: {\n            currentTask,\n            processRecords,\n            taskDetailLoading: loading,\n            selectedTaskInfo\n        },\n        loadTaskDetail,\n        submitProcess\n    } = useTaskProcessStore()\n\n    const [activeTab, setActiveTab] = useState('info')\n\n    useEffect(() => {\n        if (id) {\n            loadTaskDetailData()\n        }\n    }, [id])\n\n\n    const loadTaskDetailData = async () => {\n        if (!id) return\n\n        try {\n            // 使用选中的任务信息作为上下文数据\n            const selectedTask = selectedTaskInfo\n            console.log('📋 获取选中任务信息:', selectedTask)\n\n            await loadTaskDetail(id, {\n                currentStepId: selectedTask?.currentStep,\n                currentOrgId: selectedTask?.applicantDept,\n                processTypeId: selectedTask?.type\n            })\n\n            console.log('✅ 任务详情加载完成')\n        } catch (error) {\n            console.error('❌ 任务详情加载失败:', error)\n        }\n    }\n\n    const handleSaveDraft = async () => {\n        // TODO: 保存草稿逻辑\n        console.log('💾 保存草稿')\n    }\n\n    const handleSubmitProcess = async () => {\n        // TODO: 提交处理逻辑\n        console.log('📤 提交处理')\n    }\n\n    // 渲染浮动按钮 - 注释掉星星按钮\n    // const renderFloatingButton = () => (\n    //     <FloatingBubble\n    //         className=\"floating-button\"\n    //         onClick={() => console.log('🔗 分享任务')}\n    //     >\n    //         ⭐\n    //     </FloatingBubble>\n    // )\n\n    // 渲染底部操作按钮\n    const renderBottomActions = () => (\n        <div className=\"bottom-actions\">\n            <Button\n                color=\"default\"\n                onClick={() => setActiveTab('process')}\n            >\n                流程处理\n            </Button>\n            <Button\n                color=\"primary\"\n                onClick={() => setActiveTab('record')}\n            >\n                查看记录\n            </Button>\n        </div>\n    )\n\n    // 渲染任务头部卡片\n    const renderTaskHeader = () => {\n        const task = currentTask || selectedTaskInfo\n        if (!task) return null\n\n        return (\n            <Card className=\"task-header-card\">\n                <div className=\"task-type\">\n                    {task.type || '流程审批申请'}\n                </div>\n                <div className=\"task-title\">\n                    {task.title || '报告申请 - 差旅费用报销'}\n                </div>\n                <div className=\"task-meta-row\">\n                    <div className=\"task-meta-item\">\n                        <ClockCircleOutline />\n                        <span>流程发起人：{task.applicant || '张三'}</span>\n                    </div>\n                    <div className=\"task-meta-item\">\n                        <span>所在部门：{task.applicantDept || '技术部'}</span>\n                    </div>\n                </div>\n                <div className=\"task-meta-row\">\n                    <div className=\"task-meta-item\">\n                        <span>当前处理人：{task.currentHandler || '李四'}</span>\n                    </div>\n                    <div className=\"task-meta-item\">\n                        <span>当前步骤：{task.currentStep || '复审'}</span>\n                    </div>\n                </div>\n                <div className=\"task-meta-row\">\n                    <div className=\"task-meta-item\">\n                        <span>发起时间：2025/01/07</span>\n                    </div>\n                    <div className=\"task-meta-item\">\n                        <span>截止时间：2024/12/11</span>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n\n    if (loading) {\n        return (\n            <div className=\"task-detail-page\">\n                <NavBar\n                    className=\"task-detail-nav\"\n                    onBack={() => history.back()}\n                    backIcon={<LeftOutline />}\n                >\n                    任务详情\n                </NavBar>\n                <div style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    height: '50vh'\n                }}>\n                    <SpinLoading />\n                </div>\n            </div>\n        )\n    }\n\n    if (!currentTask && !selectedTaskInfo) {\n        return (\n            <div className=\"task-detail-page\">\n                <NavBar\n                    className=\"task-detail-nav\"\n                    onBack={() => history.back()}\n                    backIcon={<LeftOutline />}\n                >\n                    任务详情\n                </NavBar>\n                <div className=\"task-detail-error\">\n                    <div className=\"error-content\">\n                        <ExclamationCircleOutline style={{ fontSize: 48, color: '#999' }} />\n                        <p>任务不存在或已被删除</p>\n                        <Button onClick={() => history.back()}>返回</Button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"task-detail-page\">\n            <NavBar\n                className=\"task-detail-nav\"\n                onBack={() => history.back()}\n                backIcon={<LeftOutline />}\n            >\n                任务详情\n            </NavBar>\n\n            {renderTaskHeader()}\n\n            <Tabs\n                className=\"detail-tabs\"\n                activeKey={activeTab}\n                onChange={setActiveTab}\n            >\n                <Tabs.Tab title=\"报告信息\" key=\"info\">\n                    <TaskInfo task={currentTask || selectedTaskInfo} />\n                </Tabs.Tab>\n                <Tabs.Tab title=\"流程记录\" key=\"record\">\n                    <ProcessRecord\n                        taskId={id || ''}\n                        records={processRecords || []}\n                    />\n                </Tabs.Tab>\n                <Tabs.Tab title=\"流程处理\" key=\"process\">\n                    <ProcessPanel\n                        task={currentTask || selectedTaskInfo}\n                        onSubmit={submitProcess}\n                    />\n                </Tabs.Tab>\n            </Tabs>\n\n            {activeTab === 'info' && renderBottomActions()}\n            {/* {renderFloatingButton()} */}\n        </div>\n    )\n}\n\nexport default TaskDetail",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/TaskProcess/TaskDetail/index.tsx"
    },
    "19": {
      "path": "/task-process/file-list",
      "file": "@/pages/TaskProcess/FileList/index.tsx",
      "parentId": "4",
      "id": "19",
      "absPath": "/task-process/file-list",
      "__content": "import {\n    ActionSheet,\n    Button,\n    Checkbox,\n    Empty,\n    NavBar,\n    Toast\n} from 'antd-mobile'\nimport {\n    DownOutline,\n    LeftOutline\n} from 'antd-mobile-icons'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { history, useLocation } from 'umi'\nimport './index.css'\n\ninterface FileItem {\n    id: string\n    name: string\n    type: 'word' | 'excel' | 'pdf' | 'image' | 'other'\n    size: string\n    status: 'pending' | 'electronic' | 'archive' | 'manual' | 'marked'\n    modifyTime: string\n    serialNumber: string\n    legalId: string\n    documentNumber: string\n    printCount: number\n}\n\ninterface TaskFileData {\n    fileType: 'template' | 'attachment'\n    files: FileItem[]\n    taskId?: string\n    taskTitle?: string\n}\n\ninterface FileListProps {\n    fileType?: 'template' | 'attachment'\n    files?: FileItem[]\n}\n\nconst FileList: React.FC<FileListProps> = ({\n    fileType: propFileType,\n    files: propFiles\n}) => {\n    const location = useLocation()\n    const [fileType, setFileType] = useState<'template' | 'attachment'>('template')\n    const [files, setFiles] = useState<FileItem[]>([])\n    const [taskInfo, setTaskInfo] = useState<{ taskId?: string, taskTitle?: string }>({})\n    const [selectedFiles, setSelectedFiles] = useState<string[]>([])\n    const [expandedFiles, setExpandedFiles] = useState<string[]>([])\n    const [showActions, setShowActions] = useState(false)\n\n    // 初始化数据\n    useEffect(() => {\n        console.log('🗂️ FileList 初始化，获取文件数据', { location, propFileType, propFiles })\n\n        // 优先从路由状态获取数据\n        const routeState = location.state as TaskFileData | undefined\n        if (routeState) {\n            console.log('📋 从路由状态获取文件数据:', routeState)\n            setFileType(routeState.fileType)\n            setFiles(routeState.files || [])\n            setTaskInfo({\n                taskId: routeState.taskId,\n                taskTitle: routeState.taskTitle\n            })\n        } else {\n            // 回退到URL参数和props\n            const urlParams = new URLSearchParams(location.search)\n            const urlFileType = urlParams.get('type') as 'template' | 'attachment'\n\n            if (urlFileType) {\n                setFileType(urlFileType)\n                console.log('📋 从URL参数获取文件类型:', urlFileType)\n            } else if (propFileType) {\n                setFileType(propFileType)\n                console.log('📋 从props获取文件类型:', propFileType)\n            }\n\n            if (propFiles) {\n                setFiles(propFiles)\n                console.log('📋 从props获取文件列表:', propFiles)\n            }\n        }\n    }, [location, propFileType, propFiles])\n\n    const handleSelectAll = useCallback(() => {\n        if (selectedFiles.length === files.length) {\n            setSelectedFiles([])\n        } else {\n            setSelectedFiles(files.map(f => f.id))\n        }\n    }, [selectedFiles, files])\n\n    const handleSelectFile = useCallback((fileId: string) => {\n        setSelectedFiles(prev =>\n            prev.includes(fileId)\n                ? prev.filter(id => id !== fileId)\n                : [...prev, fileId]\n        )\n    }, [])\n\n    const toggleFileExpand = useCallback((fileId: string) => {\n        setExpandedFiles(prev =>\n            prev.includes(fileId)\n                ? prev.filter(id => id !== fileId)\n                : [...prev, fileId]\n        )\n    }, [])\n\n    const handleOperation = () => {\n        if (selectedFiles.length === 0) {\n            Toast.show('请先选择文件')\n            return\n        }\n        setShowActions(true)\n    }\n\n    const handleView = () => {\n        Toast.show(`查看 ${selectedFiles.length} 个文件`)\n        setShowActions(false)\n    }\n\n    const handleDownload = () => {\n        Toast.show(`下载 ${selectedFiles.length} 个文件`)\n        setShowActions(false)\n    }\n\n    const getFileIcon = (type: FileItem['type']) => {\n        const iconMap = {\n            word: '📄',\n            excel: '📊',\n            pdf: '📕',\n            image: '🖼️',\n            other: '📋'\n        }\n        return iconMap[type] || '📋'\n    }\n\n    const getStatusText = (status: FileItem['status']) => {\n        const statusMap = {\n            pending: '待用印',\n            electronic: '电子用印',\n            archive: '推至数字档案',\n            manual: '手工印印确认',\n            marked: '标记不印印'\n        }\n        return statusMap[status] || status\n    }\n\n    const renderFileItem = (file: FileItem) => {\n        const isSelected = selectedFiles.includes(file.id)\n        const isExpanded = expandedFiles.includes(file.id)\n\n        return (\n            <div key={file.id} className=\"file-item\">\n                <div className={`file-header ${isExpanded ? 'expanded' : ''}`}>\n                    <Checkbox\n                        className=\"file-checkbox\"\n                        checked={isSelected}\n                        onChange={() => handleSelectFile(file.id)}\n                    />\n                    <div className={`file-icon ${file.type}`}>\n                        {getFileIcon(file.type)}\n                    </div>\n                    <div className=\"file-info\">\n                        <div className=\"file-name\">{file.name}</div>\n                        <div className=\"file-meta\">\n                            <span className=\"file-type\">{file.type === 'other' ? '其他' : file.type}</span>\n                            <span className=\"file-size\">{file.size}MB</span>\n                        </div>\n                    </div>\n                    <Button\n                        className=\"expand-button\"\n                        onClick={() => toggleFileExpand(file.id)}\n                    >\n                        <DownOutline className={`expand-icon ${isExpanded ? 'expanded' : ''}`} />\n                    </Button>\n                </div>\n                {isExpanded && (\n                    <div className=\"file-details\">\n                        <div className=\"detail-grid\">\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">类型</span>\n                                <span className=\"detail-value\">{file.type === 'other' ? '其他' : file.type}</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">份数</span>\n                                <span className=\"detail-value\">{Math.floor(Math.random() * 20 + 1)}</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">法审情况</span>\n                                <span className=\"detail-value\">——</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">法审ID</span>\n                                <span className=\"detail-value\">——</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">文本编号</span>\n                                <span className=\"detail-value highlight\">{file.serialNumber}</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">状态</span>\n                                <span className={`detail-value status-${file.status}`}>\n                                    {getStatusText(file.status)}\n                                </span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">文本修改时间</span>\n                                <span className=\"detail-value\">{file.modifyTime}</span>\n                            </div>\n                            <div className=\"detail-row\">\n                                <span className=\"detail-label\">用印说明</span>\n                                <span className=\"detail-value\">{Math.floor(Math.random() * 20 + 1)}</span>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"file-list-page\">\n            <NavBar\n                className=\"file-list-nav\"\n                onBack={() => {\n                    console.log('🔙 文件列表页返回按钮点击')\n                    try {\n                        history.back()\n                    } catch (error) {\n                        console.error('返回失败，使用备用方案:', error)\n                        if (taskInfo.taskId) {\n                            history.push(`/task-process/detail/${taskInfo.taskId}`)\n                        } else {\n                            history.push('/task-process')\n                        }\n                    }\n                }}\n                backIcon={<LeftOutline />}\n            >\n                {fileType === 'template' ? '用印文本列表' : '附件列表'}\n            </NavBar>\n\n            <div className=\"file-list-content\">\n                {files.length === 0 ? (\n                    <Empty\n                        className=\"empty-file-list\"\n                        description=\"暂无文件\"\n                        imageStyle={{ width: 64, height: 64 }}\n                    />\n                ) : (\n                    files.map(renderFileItem)\n                )}\n            </div>\n\n            <div className=\"file-list-footer\">\n                <div className=\"footer-left\">\n                    <Button\n                        className=\"select-all-btn\"\n                        onClick={handleSelectAll}\n                    >\n                        {selectedFiles.length === files.length ? '取消' : '全选'}\n                    </Button>\n                    <span className=\"selected-count\">\n                        已选择 <span className=\"count\">{selectedFiles.length}</span> 个\n                    </span>\n                </div>\n                <Button\n                    className=\"operation-btn\"\n                    color=\"primary\"\n                    disabled={selectedFiles.length === 0}\n                    onClick={handleOperation}\n                >\n                    操作\n                </Button>\n            </div>\n\n            {/* 操作弹窗 - 参考ui12.jpg，只保留查看和下载 */}\n            <ActionSheet\n                visible={showActions}\n                actions={[\n                    {\n                        text: '查看',\n                        key: 'view',\n                        style: { color: '#333333' }\n                    },\n                    {\n                        text: '下载',\n                        key: 'download',\n                        style: { color: '#333333' }\n                    }\n                ]}\n                cancelText=\"取消\"\n                onClose={() => setShowActions(false)}\n                onAction={(action) => {\n                    if (action.key === 'view') {\n                        handleView()\n                    } else if (action.key === 'download') {\n                        handleDownload()\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nexport default FileList",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/TaskProcess/FileList/index.tsx"
    },
    "20": {
      "path": "/message/:id",
      "file": "@/pages/Message/MessageDetail.tsx",
      "parentId": "4",
      "id": "20",
      "absPath": "/message/:id",
      "__content": "import { history, useParams } from 'umi'\nimport { Card, NavBar } from 'antd-mobile'\nimport React from 'react'\n\nconst MessageDetail: React.FC = () => {\n    const { id } = useParams<{ id: string }>()\n\n    return (\n        <div style={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>\n            <NavBar onBack={() => history.back()}>消息详情</NavBar>\n            <div style={{ padding: 16 }}>\n                <Card>\n                    <h2>消息详情 #{id}</h2>\n                    <p>这是一个消息详情页面...</p>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageDetail\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Message/MessageDetail.tsx"
    },
    "21": {
      "path": "/profile/edit",
      "file": "@/pages/Profile/EditProfile.tsx",
      "parentId": "4",
      "id": "21",
      "absPath": "/profile/edit",
      "__content": "import { Button, Card, Form, Input, NavBar } from 'antd-mobile'\nimport React from 'react'\nimport { history } from 'umi'\n\nconst EditProfile: React.FC = () => {\n    const [form] = Form.useForm()\n\n    const handleSubmit = (values: any) => {\n        console.log('Form values:', values)\n        history.back()\n    }\n\n    return (\n        <div style={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>\n            <NavBar onBack={() => history.back()}>编辑资料</NavBar>\n            <div style={{ padding: 16 }}>\n                <Card>\n                    <Form form={form} onFinish={handleSubmit} layout=\"vertical\">\n                        <Form.Item name=\"nickname\" label=\"昵称\">\n                            <Input placeholder=\"请输入昵称\" />\n                        </Form.Item>\n                        <Form.Item name=\"email\" label=\"邮箱\">\n                            <Input placeholder=\"请输入邮箱\" />\n                        </Form.Item>\n                        <Form.Item name=\"phone\" label=\"手机号\">\n                            <Input placeholder=\"请输入手机号\" />\n                        </Form.Item>\n                        <Button type=\"submit\" color=\"primary\" block>\n                            保存\n                        </Button>\n                    </Form>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default EditProfile\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Profile/EditProfile.tsx"
    },
    "22": {
      "path": "/404",
      "layout": false,
      "file": "@/pages/NotFound/NotFound.tsx",
      "id": "22",
      "absPath": "/404",
      "__content": "import { useDeviceInfo } from '@/hooks/useDeviceInfo'\nimport { Button, Space } from 'antd-mobile'\nimport { history } from 'umi'\nimport './NotFound.css'\n\nexport default function NotFound() {\n    const { isMobile, isTablet } = useDeviceInfo()\n\n    const handleGoHome = () => {\n        history.push('/')\n    }\n\n    const handleGoBack = () => {\n        if (window.history.length > 1) {\n            history.back()\n        } else {\n            history.push('/')\n        }\n    }\n\n    return (\n        <div className={`not-found-page ${isMobile ? 'mobile' : ''} ${isTablet ? 'tablet' : ''}`}>\n            <div className=\"not-found-container\">\n                <div className=\"not-found-content\">\n                    {/* 404 图标 */}\n                    <div className=\"error-icon\">\n                        <div className=\"error-number\">404</div>\n                        <div className=\"error-emoji\">😵</div>\n                    </div>\n\n                    {/* 错误信息 */}\n                    <div className=\"error-info\">\n                        <h2 className=\"error-title\">页面不存在</h2>\n                        <p className=\"error-description\">\n                            抱歉，您访问的页面可能已被删除、重命名或暂时不可用。\n                        </p>\n                    </div>\n\n                    {/* 操作按钮 */}\n                    <div className=\"error-actions\">\n                        <Space direction=\"vertical\" block>\n                            <Button\n                                color=\"primary\"\n                                size=\"large\"\n                                block\n                                onClick={handleGoHome}\n                            >\n                                返回首页\n                            </Button>\n                            <Button\n                                size=\"large\"\n                                block\n                                onClick={handleGoBack}\n                            >\n                                返回上页\n                            </Button>\n                        </Space>\n                    </div>\n\n                    {/* 建议操作 */}\n                    <div className=\"error-suggestions\">\n                        <h3 className=\"suggestions-title\">您可以尝试：</h3>\n                        <ul className=\"suggestions-list\">\n                            <li>检查网址是否正确</li>\n                            <li>返回上一页面</li>\n                            <li>访问首页重新导航</li>\n                            <li>稍后再试</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/NotFound/NotFound.tsx"
    },
    "23": {
      "path": "/403",
      "layout": false,
      "file": "@/pages/Error/Forbidden.tsx",
      "id": "23",
      "absPath": "/403",
      "__content": "import { Button, Result } from 'antd-mobile'\nimport { LockOutline } from 'antd-mobile-icons'\nimport React from 'react'\nimport { history } from 'umi'\nimport './Error.css'\n\nconst Forbidden: React.FC = () => {\n    const goHome = () => {\n        history.push('/')\n    }\n\n    const goBack = () => {\n        history.back()\n    }\n\n    return (\n        <div className=\"error-container\">\n            <Result\n                icon={<LockOutline style={{ fontSize: 64, color: '#ff6b35' }} />}\n                status=\"error\"\n                title=\"访问被拒绝\"\n                description=\"抱歉，您没有权限访问此页面。请联系管理员获取访问权限。\"\n            />\n\n            <div className=\"error-actions\">\n                <Button color=\"primary\" onClick={goHome} block>\n                    返回首页\n                </Button>\n                <Button fill=\"outline\" onClick={goBack} block style={{ marginTop: 12 }}>\n                    返回上一页\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Forbidden\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Error/Forbidden.tsx"
    },
    "24": {
      "path": "/500",
      "layout": false,
      "file": "@/pages/Error/ServerError.tsx",
      "id": "24",
      "absPath": "/500",
      "__content": "import { Button, Result } from 'antd-mobile'\nimport { ExclamationCircleOutline } from 'antd-mobile-icons'\nimport React from 'react'\nimport { history } from 'umi'\nimport './Error.css'\n\nconst ServerError: React.FC = () => {\n  const goHome = () => {\n    history.push('/')\n  }\n\n  const refresh = () => {\n    window.location.reload()\n  }\n\n  const goBack = () => {\n    history.back()\n  }\n\n  return (\n    <div className=\"error-container\">\n      <Result\n        icon={<ExclamationCircleOutline style={{ fontSize: 64, color: '#ff6b35' }} />}\n        status=\"error\"\n        title=\"服务器错误\"\n        description=\"抱歉，服务器出现了一些问题。请稍后重试或联系技术支持。\"\n      />\n\n      <div className=\"error-actions\">\n        <Button color=\"primary\" onClick={refresh} block>\n          重新加载\n        </Button>\n        <Button fill=\"outline\" onClick={goHome} block style={{ marginTop: 12 }}>\n          返回首页\n        </Button>\n        <Button fill=\"none\" onClick={goBack} block style={{ marginTop: 12 }}>\n          返回上一页\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default ServerError\n",
      "__isJSFile": true,
      "__absFile": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/pages/Error/ServerError.tsx"
    },
    "25": {
      "path": "*",
      "redirect": "/404",
      "id": "25",
      "absPath": "/*"
    }
  },
  "apiRoutes": {
    "taskProcess/index": {
      "path": "taskProcess",
      "id": "taskProcess/index",
      "file": "taskProcess/index.ts",
      "absPath": "/taskProcess",
      "__content": "/**\n * 任务处理流程 API 服务\n * 提供任务列表、任务详情、流程处理等接口调用\n * 使用模拟数据，避免@umijs/max依赖问题\n */\n\nimport type {\n    Organization,\n    Pagination,\n    ProcessRecord,\n    ProcessStep,\n    TaskDetail,\n    TaskFilter,\n    TaskItem\n} from '@/stores'\nimport { TaskPriority, TaskStatus } from '@/stores/taskProcess/types'\n\n// API 基础路径\nconst BASE_URL = '/api/task-process'\n\n// 响应数据格式\ninterface ApiResponse<T = any> {\n    success: boolean\n    code: number\n    message: string\n    data: T\n    timestamp?: number\n}\n\n// 列表响应格式\ninterface ListResponse<T> {\n    list: T[]\n    pagination: Pagination\n}\n\n/**\n * 任务列表相关 API\n */\nexport const taskListApi = {\n    // 获取任务列表\n    async getTaskList(params?: {\n        filter?: TaskFilter\n        page?: number\n        pageSize?: number\n    }): Promise<ListResponse<TaskItem>> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // 返回模拟数据\n        const mockTasks = getMockTaskList()\n        const page = params?.page || 1\n        const pageSize = params?.pageSize || 10\n        const start = (page - 1) * pageSize\n        const end = start + pageSize\n\n        return {\n            list: mockTasks.slice(start, end),\n            pagination: {\n                current: page,\n                pageSize,\n                total: mockTasks.length,\n                totalPages: Math.ceil(mockTasks.length / pageSize)\n            }\n        }\n    },\n\n    // 获取任务统计\n    async getTaskStatistics(): Promise<{\n        total: number\n        pending: number\n        processing: number\n        completed: number\n        rejected: number\n    }> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n\n        return {\n            total: 128,\n            pending: 45,\n            processing: 32,\n            completed: 38,\n            rejected: 13\n        }\n    }\n}\n\n/**\n * 任务详情相关 API\n */\nexport const taskDetailApi = {\n    // 获取任务详情\n    async getTaskDetail(taskId: string): Promise<TaskDetail> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 300))\n        // 返回模拟数据\n        return getMockTaskDetail(taskId)\n    }\n}\n\n/**\n * 流程处理相关 API\n */\nexport const processApi = {\n    // 获取流程记录\n    async getProcessRecords(taskId: string): Promise<ProcessRecord[]> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return getMockProcessRecords(taskId)\n    },\n\n    // 提交流程处理\n    async submitProcess(data: {\n        taskId: string\n        action: string\n        opinion?: string\n        nextStep?: string\n        nextOrg?: string\n        notifyUsers?: string[]\n        attachments?: string[]\n    }): Promise<boolean> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 500))\n        console.log('提交流程处理:', data)\n        return true\n    },\n\n    // 保存草稿\n    async saveDraft(data: {\n        taskId: string\n        nextStep?: string\n        nextOrg?: string\n        notifyUsers?: string[]\n        opinion?: string\n        urgentLevel?: string\n        isUrgent?: boolean\n        attachments?: string[]\n    }): Promise<boolean> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 300))\n        console.log('保存草稿:', data)\n        return true\n    }\n}\n\n/**\n * 机构相关 API\n */\nexport const organizationApi = {\n    // 获取机构列表\n    async getOrganizations(): Promise<Organization[]> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return getMockOrganizations()\n    },\n\n    // 根据机构获取下一步骤\n    async getNextStepsByOrg(orgId: string): Promise<ProcessStep[]> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return getMockProcessSteps()\n    },\n\n    // 根据步骤获取下一机构\n    async getNextOrgsByStep(stepId: string): Promise<Organization[]> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return getMockOrganizations()\n    },\n\n    // 获取知悉人员\n    async getNotifyUsers(orgId: string): Promise<any[]> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return getMockUsers()\n    }\n}\n\n/**\n * 文件相关 API\n */\nexport const fileApi = {\n    // 文件上传\n    async upload(file: File): Promise<{ url: string; name: string }> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        return {\n            url: `https://example.com/files/${file.name}`,\n            name: file.name\n        }\n    },\n\n    // 文件下载\n    async download(url: string, filename: string): Promise<void> {\n        // 模拟API调用延迟\n        await new Promise(resolve => setTimeout(resolve, 500))\n        console.log('下载文件:', url, filename)\n    }\n}\n\n// ==================== 模拟数据生成函数 ====================\n\n// 生成模拟任务列表\nfunction getMockTaskList(): TaskItem[] {\n    return Array.from({ length: 10 }, (_, index) => ({\n        id: `task_${Date.now()}_${index}`,\n        title: `任务${index + 1} - 流程审批申请`,\n        processNumber: `PROC-${Date.now()}-${String(index + 1).padStart(3, '0')}`,\n        type: ['报销申请', '请假申请', '采购申请', '项目申请'][index % 4],\n        status: [TaskStatus.PENDING, TaskStatus.PROCESSING, TaskStatus.COMPLETED, TaskStatus.REJECTED][index % 4],\n        priority: [TaskPriority.LOW, TaskPriority.NORMAL, TaskPriority.HIGH, TaskPriority.URGENT][index % 4],\n        applicant: ['张三', '李四', '王五', '赵六'][index % 4],\n        applicantDept: ['技术部', '财务部', '人力资源部', '市场部'][index % 4],\n        currentStep: ['初审', '复审', '终审', '归档'][index % 4],\n        currentHandler: ['张经理', '李主管', '王总监', '赵副总'][index % 4],\n        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),\n        deadline: Math.random() > 0.3 ? new Date(Date.now() + Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString() : undefined,\n        tags: [['紧急'], ['重要'], ['常规'], ['延期']][index % 4],\n        summary: `这是任务${index + 1}的简要描述...`\n    }))\n}\n\nfunction getMockTaskDetail(taskId: string): TaskDetail {\n    return {\n        id: taskId,\n        title: '报销申请 - 差旅费用报销',\n        processNumber: 'PROC-20241205-001',\n        type: '报销申请',\n        status: TaskStatus.PROCESSING,\n        priority: TaskPriority.NORMAL,\n        applicant: '张三',\n        applicantDept: '技术部',\n        currentStep: '复审',\n        currentHandler: '李主管',\n        createdAt: '2024-12-01T09:00:00Z',\n        updatedAt: '2024-12-03T14:30:00Z',\n        deadline: '2024-12-10T18:00:00Z',\n        tags: ['差旅', '报销'],\n        summary: '出差北京产生的交通、住宿费用报销',\n        description: '本次出差是为了参加重要客户会议，产生交通费1200元，住宿费800元，餐费400元，总计2400元。',\n        attachments: ['发票1.jpg', '发票2.jpg', '行程单.pdf'],\n        reportInfo: {\n            reportType: '费用报销',\n            reportContent: '差旅费用报销申请，包含交通费、住宿费、餐费等',\n            reportDate: '2024-12-01',\n            reporter: '张三',\n            reporterDept: '技术部',\n            bindingOrg: 'org_finance',\n            relatedFiles: ['发票1.jpg', '发票2.jpg', '行程单.pdf']\n        },\n        processFlow: {\n            currentStepId: 'step_review',\n            nextStepId: 'step_final_review',\n            nextOrgId: 'org_management',\n            notifyUsers: ['user_manager', 'user_finance'],\n            processOpinion: ''\n        },\n        history: getMockProcessRecords(taskId)\n    }\n}\n\nfunction getMockProcessRecords(taskId: string): ProcessRecord[] {\n    return [\n        {\n            id: 'record_1',\n            taskId,\n            action: '提交申请',\n            step: '申请提交',\n            handler: 'user_001',\n            handlerName: '张三',\n            department: '技术部',\n            comment: '提交差旅费用报销申请',\n            attachments: ['发票1.jpg', '发票2.jpg'],\n            createdAt: '2024-12-01T09:00:00Z',\n            duration: 5,\n            status: 'success'\n        },\n        {\n            id: 'record_2',\n            taskId,\n            action: '初审通过',\n            step: '初审',\n            handler: 'user_002',\n            handlerName: '李经理',\n            department: '技术部',\n            comment: '费用合理，初审通过',\n            createdAt: '2024-12-02T10:30:00Z',\n            duration: 15,\n            status: 'success'\n        }\n    ]\n}\n\nfunction getMockOrganizations(): Organization[] {\n    return [\n        {\n            id: 'org_tech',\n            name: '技术部',\n            code: 'TECH',\n            type: 'department',\n            level: 2,\n            sort: 1,\n            status: 'active',\n            description: '负责技术研发工作',\n            createdAt: '2024-01-01T00:00:00Z',\n            updatedAt: '2024-01-01T00:00:00Z'\n        },\n        {\n            id: 'org_finance',\n            name: '财务部',\n            code: 'FINANCE',\n            type: 'department',\n            level: 2,\n            sort: 2,\n            status: 'active',\n            description: '负责财务管理工作',\n            createdAt: '2024-01-01T00:00:00Z',\n            updatedAt: '2024-01-01T00:00:00Z'\n        }\n    ]\n}\n\nfunction getMockProcessSteps(): ProcessStep[] {\n    return [\n        {\n            id: 'step_review',\n            name: '初审',\n            code: 'REVIEW',\n            orgId: 'org_tech',\n            sort: 1,\n            isRequired: true,\n            description: '部门初审',\n            createdAt: '2024-01-01T00:00:00Z'\n        },\n        {\n            id: 'step_final_review',\n            name: '终审',\n            code: 'FINAL_REVIEW',\n            orgId: 'org_finance',\n            sort: 2,\n            isRequired: true,\n            description: '财务终审',\n            createdAt: '2024-01-01T00:00:00Z'\n        }\n    ]\n}\n\n// 生成模拟用户列表\nfunction getMockUsers() {\n    return [\n        { id: 'user_1', name: '张三', department: '技术部', position: '经理' },\n        { id: 'user_2', name: '李四', department: '财务部', position: '主管' },\n        { id: 'user_3', name: '王五', department: '人力资源部', position: '专员' },\n        { id: 'user_4', name: '赵六', department: '市场部', position: '总监' },\n        { id: 'user_5', name: '钱七', department: '技术部', position: '工程师' }\n    ]\n}\n\n// 为了兼容store中的taskApi，创建taskApi别名\nexport const taskApi = {\n    getTaskDetail: taskDetailApi.getTaskDetail,\n    getTaskList: taskListApi.getTaskList,\n    getTaskStatistics: taskListApi.getTaskStatistics\n}"
    },
    "client": {
      "path": "client",
      "id": "client",
      "file": "client.ts",
      "absPath": "/client",
      "__content": "/**\n * API客户端配置\n * 统一的HTTP客户端，包含拦截器、错误处理等\n */\n\nimport { useAuthStore } from '@/stores/auth/useAuthStore'\nimport { toast } from '@/stores/ui/useUIStore'\nimport axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\nimport { appConfig } from '../config/env'\n\n// API响应基础结构\nexport interface ApiResponse<T = any> {\n    code: number\n    message: string\n    data: T\n    success: boolean\n    timestamp: number\n}\n\n// API错误类型\nexport interface ApiError {\n    code: number\n    message: string\n    details?: any\n}\n\n// 创建axios实例\nexport const apiClient = axios.create({\n    baseURL: appConfig.apiBaseUrl,\n    timeout: appConfig.apiTimeout,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n})\n\n// 请求拦截器\napiClient.interceptors.request.use(\n    (config) => {\n        // 添加认证token\n        const { token } = useAuthStore.getState()\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`\n        }\n\n        // 添加请求ID用于追踪\n        config.headers['X-Request-ID'] = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n        // 开发环境下打印请求信息\n        if (appConfig.isDev) {\n            console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\n                headers: config.headers,\n                params: config.params,\n                data: config.data,\n            })\n        }\n\n        return config\n    },\n    (error) => {\n        console.error('❌ Request Error:', error)\n        return Promise.reject(error)\n    }\n)\n\n// 响应拦截器\napiClient.interceptors.response.use(\n    (response: AxiosResponse<ApiResponse>) => {\n        const { data } = response\n\n        // 开发环境下打印响应信息\n        if (appConfig.isDev) {\n            console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, {\n                status: response.status,\n                data,\n            })\n        }\n\n        // 统一处理业务错误\n        if (!data.success && data.code !== 200) {\n            const error: ApiError = {\n                code: data.code,\n                message: data.message,\n                details: data.data,\n            }\n\n            // 显示错误提示\n            toast.error(data.message)\n\n            return Promise.reject(error)\n        }\n\n        return response\n    },\n    async (error: AxiosError<ApiResponse>) => {\n        const { response, config } = error\n\n        // 开发环境下打印错误信息\n        if (appConfig.isDev) {\n            console.error(`❌ API Error: ${config?.method?.toUpperCase()} ${config?.url}`, {\n                status: response?.status,\n                data: response?.data,\n                message: error.message,\n            })\n        }\n\n        // 处理不同的HTTP状态码\n        if (response) {\n            const { status, data } = response\n\n            switch (status) {\n                case 401:\n                    // 未授权，清除认证信息并跳转到登录页\n                    useAuthStore.getState().logout()\n                    toast.error('登录已过期，请重新登录')\n                    // 这里可以添加路由跳转逻辑\n                    break\n\n                case 403:\n                    toast.error('没有权限访问该资源')\n                    break\n\n                case 404:\n                    toast.error('请求的资源不存在')\n                    break\n\n                case 422:\n                    // 表单验证错误\n                    if (data?.data && typeof data.data === 'object') {\n                        const firstErrorMessage = Object.values(data.data)[0]\n                        toast.error(firstErrorMessage as string)\n                    } else {\n                        toast.error(data?.message || '请求参数错误')\n                    }\n                    break\n\n                case 429:\n                    toast.error('请求过于频繁，请稍后再试')\n                    break\n\n                case 500:\n                    toast.error('服务器内部错误')\n                    break\n\n                default:\n                    toast.error(data?.message || `请求失败 (${status})`)\n            }\n\n            // 返回统一的错误格式\n            const apiError: ApiError = {\n                code: status,\n                message: data?.message || error.message,\n                details: data?.data,\n            }\n\n            return Promise.reject(apiError)\n        }\n\n        // 网络错误或其他错误\n        if (error.code === 'ECONNABORTED') {\n            toast.error('请求超时，请检查网络连接')\n        } else if (!navigator.onLine) {\n            toast.error('网络连接异常，请检查网络设置')\n        } else {\n            toast.error('网络错误，请稍后重试')\n        }\n\n        return Promise.reject({\n            code: 0,\n            message: error.message,\n            details: error,\n        } as ApiError)\n    }\n)\n\n// 请求方法封装\nexport const api = {\n    get: <T = any>(url: string, config?: AxiosRequestConfig) =>\n        apiClient.get<ApiResponse<T>>(url, config).then(res => res.data.data),\n\n    post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) =>\n        apiClient.post<ApiResponse<T>>(url, data, config).then(res => res.data.data),\n\n    put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) =>\n        apiClient.put<ApiResponse<T>>(url, data, config).then(res => res.data.data),\n\n    patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) =>\n        apiClient.patch<ApiResponse<T>>(url, data, config).then(res => res.data.data),\n\n    delete: <T = any>(url: string, config?: AxiosRequestConfig) =>\n        apiClient.delete<ApiResponse<T>>(url, config).then(res => res.data.data),\n}\n\n// 上传文件方法\nexport const uploadFile = async (\n    url: string,\n    file: File,\n    onProgress?: (percent: number) => void\n) => {\n    const formData = new FormData()\n    formData.append('file', file)\n\n    return apiClient.post<ApiResponse<{ url: string; filename: string }>>(url, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n            if (progressEvent.total && onProgress) {\n                const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                onProgress(percent)\n            }\n        },\n    }).then(res => res.data.data)\n}\n\n// 并发请求\nexport const concurrent = <T extends readonly unknown[] | []>(\n    requests: readonly [...{ [K in keyof T]: Promise<T[K]> }]\n): Promise<T> => {\n    return Promise.all(requests) as Promise<T>\n}\n\n// 请求重试\nexport const retry = async <T>(\n    request: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n): Promise<T> => {\n    let lastError: any\n\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            return await request()\n        } catch (error) {\n            lastError = error\n            if (i < maxRetries - 1) {\n                await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)))\n            }\n        }\n    }\n\n    throw lastError\n}\n\nexport default api\n"
    }
  },
  "hasSrcDir": true,
  "npmClient": "pnpm",
  "umi": {
    "version": "4.4.11",
    "name": "Umi",
    "importSource": "umi",
    "cliName": "umi"
  },
  "bundleStatus": {
    "done": false
  },
  "mfsuBundleStatus": {
    "done": false
  },
  "react": {
    "version": "18.3.1",
    "path": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react"
  },
  "react-dom": {
    "version": "18.3.1",
    "path": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/node_modules/react-dom"
  },
  "appJS": {
    "path": "/Users/huangyuming/Desktop/createProjects/AI-code/apps/mobile/src/app.tsx",
    "exports": [
      "rootContainer"
    ]
  },
  "locale": "zh-CN",
  "globalCSS": [],
  "globalJS": [],
  "overridesCSS": [],
  "bundler": "webpack",
  "git": {
    "originUrl": "https://github.com/corn12138/AI-code.git"
  },
  "framework": "react",
  "typescript": {
    "tsVersion": "5.8.3",
    "tslibVersion": "2.8.1"
  },
  "faviconFiles": [],
  "port": 8000,
  "host": "0.0.0.0",
  "ip": "192.168.1.11"
}
