import { uploadImage } from '@/services/api';
import { Tab } from '@headlessui/react';
import dynamic from 'next/dynamic';
import { useCallback, useRef, useState } from 'react';

// Âä®ÊÄÅÂØºÂÖ•ÈÅøÂÖçSSRÈóÆÈ¢ò
const MarkdownRenderer = dynamic(() => import('./MarkdownRenderer'), {
    ssr: false,
});

interface MarkdownEditorProps {
    value: string;
    onChange: (value: string) => void;
}

export default function MarkdownEditor({ value, onChange }: MarkdownEditorProps) {
    const [selectedTab, setSelectedTab] = useState(0);
    const textareaRef = useRef<HTMLTextAreaElement>(null);
    const [isUploading, setIsUploading] = useState(false);

    // Â§ÑÁêÜÂõæÁâáÁ≤òË¥¥‰∏ä‰º†
    const handlePaste = useCallback(
        async (e: React.ClipboardEvent) => {
            const items = e.clipboardData?.items;
            if (!items) return;

            const imageItem = Array.from(items).find(
                (item) => item.kind === 'file' && item.type.startsWith('image/')
            );

            if (!imageItem) return;

            e.preventDefault();
            const file = imageItem.getAsFile();
            if (!file) return;

            setIsUploading(true);
            try {
                const imageUrl = await uploadImage(file);

                // Âú®ÂÖâÊ†á‰ΩçÁΩÆÊèíÂÖ•ÂõæÁâáMarkdown
                const textarea = textareaRef.current;
                if (textarea) {
                    const startPos = textarea.selectionStart;
                    const endPos = textarea.selectionEnd;
                    const imageMarkdown = `![ÂõæÁâá](${imageUrl})`;

                    const newText =
                        value.substring(0, startPos) +
                        imageMarkdown +
                        value.substring(endPos);

                    onChange(newText);

                    // ÈáçÊñ∞ËÆæÁΩÆÂÖâÊ†á‰ΩçÁΩÆ
                    setTimeout(() => {
                        textarea.selectionStart = startPos + imageMarkdown.length;
                        textarea.selectionEnd = startPos + imageMarkdown.length;
                        textarea.focus();
                    }, 0);
                }
            } catch (error) {
                console.error('Failed to upload image:', error);
                alert('ÂõæÁâá‰∏ä‰º†Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            } finally {
                setIsUploading(false);
            }
        },
        [value, onChange]
    );

    // Â∑•ÂÖ∑Ê†èÊåâÈíÆÁÇπÂáªÂ§ÑÁêÜ
    const handleToolbarClick = (markdownSyntax: string, placeholder?: string) => {
        const textarea = textareaRef.current;
        if (!textarea) return;

        const startPos = textarea.selectionStart;
        const endPos = textarea.selectionEnd;
        const selectedText = value.substring(startPos, endPos);

        let newText;
        let newCursorPos;

        if (selectedText) {
            // Â¶ÇÊûúÊúâÈÄâ‰∏≠ÁöÑÊñáÊú¨ÔºåÂú®ÈÄâ‰∏≠ÊñáÊú¨ÂâçÂêéÊ∑ªÂä†ËØ≠Ê≥ï
            newText =
                value.substring(0, startPos) +
                markdownSyntax.replace('$1', selectedText) +
                value.substring(endPos);
            newCursorPos = startPos + markdownSyntax.indexOf('$1') + selectedText.length +
                (markdownSyntax.length - markdownSyntax.indexOf('$1') - 2);
        } else if (placeholder) {
            // Â¶ÇÊûúÊ≤°ÊúâÈÄâ‰∏≠ÊñáÊú¨‰ΩÜÊúâÂç†‰ΩçÁ¨¶ÔºåÊèíÂÖ•Â∏¶Âç†‰ΩçÁ¨¶ÁöÑËØ≠Ê≥ï
            newText =
                value.substring(0, startPos) +
                markdownSyntax.replace('$1', placeholder) +
                value.substring(endPos);
            newCursorPos = startPos + markdownSyntax.indexOf('$1');
        } else {
            // Âê¶ÂàôÔºåÂè™ÊèíÂÖ•ËØ≠Ê≥ï
            newText =
                value.substring(0, startPos) +
                markdownSyntax +
                value.substring(endPos);
            newCursorPos = startPos + markdownSyntax.length;
        }

        onChange(newText);

        // ËÆæÁΩÆÊñ∞ÁöÑÂÖâÊ†á‰ΩçÁΩÆ
        setTimeout(() => {
            textarea.focus();
            textarea.selectionStart = placeholder ? newCursorPos : newCursorPos;
            textarea.selectionEnd = placeholder ? newCursorPos + placeholder.length : newCursorPos;
        }, 0);
    };

    return (
        <div className="border border-gray-300 rounded-lg overflow-hidden bg-white">
            {/* Â∑•ÂÖ∑Ê†è */}
            <div className="flex items-center gap-2 p-2 border-b border-gray-300 bg-gray-50">
                <button
                    onClick={() => handleToolbarClick('**$1**', 'Á≤ó‰ΩìÊñáÊú¨')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="Á≤ó‰Ωì"
                >
                    <span className="font-bold">B</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('*$1*', 'Êñú‰ΩìÊñáÊú¨')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="Êñú‰Ωì"
                >
                    <span className="italic">I</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('[ÈìæÊé•ÊñáÊú¨]($1)', 'https://')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="ÈìæÊé•"
                >
                    <span>üîó</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('![ÂõæÁâáÊèèËø∞]($1)', 'https://')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="ÂõæÁâá"
                >
                    <span>üñºÔ∏è</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('```\n$1\n```', '‰ª£Á†Å')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="‰ª£Á†ÅÂùó"
                >
                    <span>{'</>'}</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('> $1', 'ÂºïÁî®ÂÜÖÂÆπ')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="ÂºïÁî®"
                >
                    <span>‚ùù</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('- $1', 'ÂàóË°®È°π')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="Êó†Â∫èÂàóË°®"
                >
                    <span>‚Ä¢</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('1. $1', 'ÂàóË°®È°π')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="ÊúâÂ∫èÂàóË°®"
                >
                    <span>1.</span>
                </button>
                <button
                    onClick={() => handleToolbarClick('### $1', 'Ê†áÈ¢ò')}
                    className="p-2 hover:bg-gray-200 rounded"
                    title="Ê†áÈ¢ò"
                >
                    <span>H</span>
                </button>
            </div>

            {/* ÁºñËæë/È¢ÑËßàÊ†áÁ≠æÈ°µ */}
            <Tab.Group selectedIndex={selectedTab} onChange={setSelectedTab}>
                <Tab.List className="flex border-b border-gray-300">
                    <Tab className={({ selected }) =>
                        `px-4 py-2 focus:outline-none ${selected
                            ? 'border-b-2 border-blue-500 font-medium text-blue-600'
                            : 'text-gray-500 hover:text-gray-700'
                        }`
                    }>
                        ÁºñËæë
                    </Tab>
                    <Tab className={({ selected }) =>
                        `px-4 py-2 focus:outline-none ${selected
                            ? 'border-b-2 border-blue-500 font-medium text-blue-600'
                            : 'text-gray-500 hover:text-gray-700'
                        }`
                    }>
                        È¢ÑËßà
                    </Tab>
                    <Tab className={({ selected }) =>
                        `px-4 py-2 focus:outline-none ${selected
                            ? 'border-b-2 border-blue-500 font-medium text-blue-600'
                            : 'text-gray-500 hover:text-gray-700'
                        }`
                    }>
                        ÂàÜÂ±è
                    </Tab>
                </Tab.List>

                <Tab.Panels className="relative">
                    {/* ÁºñËæëÊ®°Âºè */}
                    <Tab.Panel className="h-full">
                        <textarea
                            ref={textareaRef}
                            value={value}
                            onChange={(e) => onChange(e.target.value)}
                            onPaste={handlePaste}
                            className="w-full h-[500px] p-4 resize-none focus:outline-none"
                            placeholder="ËæìÂÖ•MarkdownÂÜÖÂÆπÔºåÊîØÊåÅÁ≤òË¥¥ÂõæÁâá..."
                        />
                    </Tab.Panel>

                    {/* È¢ÑËßàÊ®°Âºè */}
                    <Tab.Panel className="h-full">
                        <div className="p-4 h-[500px] overflow-auto prose prose-slate max-w-none">
                            <MarkdownRenderer content={value} />
                        </div>
                    </Tab.Panel>

                    {/* ÂàÜÂ±èÊ®°Âºè */}
                    <Tab.Panel className="h-full">
                        <div className="flex h-[500px]">
                            <div className="w-1/2 border-r border-gray-300">
                                <textarea
                                    ref={textareaRef}
                                    value={value}
                                    onChange={(e) => onChange(e.target.value)}
                                    onPaste={handlePaste}
                                    className="w-full h-full p-4 resize-none focus:outline-none"
                                    placeholder="ËæìÂÖ•MarkdownÂÜÖÂÆπÔºåÊîØÊåÅÁ≤òË¥¥ÂõæÁâá..."
                                />
                            </div>
                            <div className="w-1/2 p-4 overflow-auto prose prose-slate max-w-none">
                                <MarkdownRenderer content={value} />
                            </div>
                        </div>
                    </Tab.Panel>
                </Tab.Panels>
            </Tab.Group>

            {/* ‰∏ä‰º†ÊåáÁ§∫Âô® */}
            {isUploading && (
                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                    <div className="bg-white rounded-lg p-4 flex items-center gap-2">
                        <div className="animate-spin h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                        <span>Ê≠£Âú®‰∏ä‰º†ÂõæÁâá...</span>
                    </div>
                </div>
            )}

            {/* Â≠óÊï∞ÁªüËÆ° */}
            <div className="p-2 text-right text-sm text-gray-500 border-t border-gray-300">
                {`${value.length} Â≠óÁ¨¶ | ${value.split(/\s+/).filter(Boolean).length} ÂçïËØç`}
            </div>
        </div>
    );
}
