name: 🧪 Continuous Integration & Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每日凌晨2点运行完整测试
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 类型检查
        run: pnpm type-check:apps

      - name: ESLint 检查
        run: pnpm lint:all

      - name: 格式检查
        run: pnpm prettier --check .

      - name: 安全扫描
        run: pnpm audit --audit-level moderate

  # 单元测试和集成测试
  test-applications:
    name: 🧪 应用测试
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        app: [blog, server, lowcode, mobile, shared]
        include:
          - app: blog
            test-command: "cd apps/blog && pnpm test --coverage"
          - app: server
            test-command: "cd apps/server && pnpm test --coverage"
          - app: lowcode
            test-command: "cd apps/lowcode && pnpm test --coverage"
          - app: mobile
            test-command: "cd apps/mobile && pnpm test --coverage"
          - app: shared
            test-command: "cd shared && pnpm test --coverage"

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 设置测试环境变量
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV

      - name: 运行 ${{ matrix.app }} 测试
        run: ${{ matrix.test-command }}

      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

  # Python 测试编排器测试
  test-orchestrator:
    name: 🐍 测试编排器
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安装 Python 依赖
        run: |
          cd testing/orchestrator
          pip install -r requirements.txt

      - name: 运行编排器测试
        run: |
          cd testing/orchestrator
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: 上传 Python 覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: ./testing/orchestrator/coverage.xml
          flags: orchestrator
          name: orchestrator-coverage

  # E2E 测试
  e2e-tests:
    name: 🌐 端到端测试
    runs-on: ubuntu-latest
    needs: [test-applications]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 设置测试环境
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV

      - name: 构建应用
        run: |
          pnpm --filter blog build
          pnpm --filter server build

      - name: 运行 E2E 测试
        run: |
          cd testing/e2e
          npx playwright test --project=${{ matrix.browser }}

      - name: 上传测试结果
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: testing/reports/playwright-report/
          retention-days: 30

  # 性能测试
  performance-tests:
    name: ⚡ 性能测试
    runs-on: ubuntu-latest
    needs: [test-applications]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装 K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建应用
        run: pnpm build

      - name: 启动应用
        run: |
          pnpm --filter blog start &
          pnpm --filter server start &
          sleep 30

      - name: 运行性能测试
        run: |
          cd testing/performance
          k6 run --out json=results.json k6/load-test.js

      - name: 上传性能报告
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: testing/performance/results.json

  # 安全测试
  security-tests:
    name: 🔒 安全测试
    runs-on: ubuntu-latest
    needs: [test-applications]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP ZAP 安全扫描
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # 使用 Python 编排器运行完整测试
  orchestrated-tests:
    name: 🎭 编排器完整测试
    runs-on: ubuntu-latest
    needs: [test-orchestrator]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[full-test]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: |
          pnpm install --frozen-lockfile
          cd testing/orchestrator
          pip install -r requirements.txt

      - name: 设置环境变量
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: 使用编排器运行所有测试
        run: |
          cd testing/orchestrator
          python main.py run --suite all --parallel 2 --timeout 3600

      - name: 上传完整测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: orchestrator-full-report
          path: testing/reports/
          retention-days: 7

  # 测试报告汇总
  test-summary:
    name: 📊 测试报告汇总
    runs-on: ubuntu-latest
    needs: [test-applications, e2e-tests]
    if: always()

    steps:
      - name: 下载所有测试报告
        uses: actions/download-artifact@v3

      - name: 生成测试摘要
        run: |
          echo "## 🧪 测试执行摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 测试结果" >> $GITHUB_STEP_SUMMARY
          echo "| 测试类型 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量检查 | ${{ needs.quality-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 应用测试 | ${{ needs.test-applications.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E 测试 | ${{ needs.e2e-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 评论 PR（如果是 PR）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const summary = `## 🧪 自动化测试结果
            
            ### 📊 测试概览
            - **代码质量**: ${{ needs.quality-check.result == 'success' && '✅ 通过' || '❌ 失败' }}
            - **单元测试**: ${{ needs.test-applications.result == 'success' && '✅ 通过' || '❌ 失败' }}
            - **E2E 测试**: ${{ needs.e2e-tests.result == 'success' && '✅ 通过' || '❌ 失败' }}
            
            详细报告请查看 [Actions 页面](${context.payload.pull_request.html_url}/checks)。
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
