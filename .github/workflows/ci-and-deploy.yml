name: CI & Deploy (Monorepo)

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/**"
      - "qa/**"
      - "shared/**"
      - "config/**"
      - "infra/**"
      - ".github/**"
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changed Projects
    runs-on: ubuntu-latest
    outputs:
      blog: ${{ steps.filter.outputs.blog }}
      lowcode: ${{ steps.filter.outputs.lowcode }}
      server: ${{ steps.filter.outputs.server }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            blog:
              - 'apps/blog/**'
            lowcode:
              - 'apps/lowcode/**'
            server:
              - 'apps/server/**'
            tests:
              - 'qa/**'
              - 'apps/**'
              - 'shared/**'
              - 'config/**'

  setup-node:
    name: Setup Node & pnpm
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

  tests:
    name: Python QA Tests
    runs-on: ubuntu-latest
    needs: [setup-node, changes]
    if: ${{ needs.changes.outputs.tests == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: qa/requirements.txt
      - name: Install QA dependencies
        working-directory: qa
        run: pip install -r requirements.txt
      # - name: Start services for CI (optional)
      #   run: docker compose -f infra/compose.ci.yml up -d
      - name: Run pytest (coverage & html)
        working-directory: qa
        run: pytest --html=report.html --self-contained-html
      - name: Upload QA report
        uses: actions/upload-artifact@v4
        with:
          name: qa-report
          path: qa/report.html

  build-blog:
    name: Build Blog Image
    runs-on: ubuntu-latest
    needs: [setup-node, tests, changes]
    if: ${{ needs.changes.outputs.blog == 'true' && needs.tests.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push blog image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/blog/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ai-code-blog:latest
            ghcr.io/${{ github.repository_owner }}/ai-code-blog:${{ github.sha }}

  build-lowcode:
    name: Build Lowcode Image
    runs-on: ubuntu-latest
    needs: [setup-node, tests, changes]
    if: ${{ needs.changes.outputs.lowcode == 'true' && needs.tests.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push lowcode image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/lowcode/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ai-code-lowcode:latest
            ghcr.io/${{ github.repository_owner }}/ai-code-lowcode:${{ github.sha }}

  build-server:
    name: Build Server Image
    runs-on: ubuntu-latest
    needs: [setup-node, tests, changes]
    if: ${{ needs.changes.outputs.server == 'true' && needs.tests.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push server image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ai-code-server:latest
            ghcr.io/${{ github.repository_owner }}/ai-code-server:${{ github.sha }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [tests, build-blog, build-lowcode, build-server, changes]
    if: >-
      ${{ github.ref == 'refs/heads/main'
          && needs.tests.result == 'success'
          && (needs.changes.outputs.blog == 'true'
              || needs.changes.outputs.lowcode == 'true'
              || needs.changes.outputs.server == 'true') }}
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/monorepo
            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME != '' && secrets.GHCR_USERNAME || github.repository_owner }} -p ${{ secrets.GHCR_TOKEN }}
            docker compose -f compose.prod.yml pull
            docker compose -f compose.prod.yml up -d
            docker system prune -f
